(this.webpackJsonpmuhamedhalimi=this.webpackJsonpmuhamedhalimi||[]).push([[0],[,,,,,,,,,,function(e,t,n){},,,function(e,t,n){},,,,,,function(e,t,n){},,function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var s=n(1),i=n.n(s),r=n(14),c=n.n(r),a=(n(19),function(e){e&&e instanceof Function&&n.e(3).then(n.bind(null,26)).then((function(t){var n=t.getCLS,s=t.getFID,i=t.getFCP,r=t.getLCP,c=t.getTTFB;n(e),s(e),i(e),r(e),c(e)}))}),l=n(8),o=n(2),d=n(3),h=n(4),b=n(6),j=n(5),m=(n(10),n(13),n.p+"static/media/java-logo-vector.4ad0c6e7.svg"),u=n.p+"static/media/python-logo-vector-1.f64482ff.svg",p=n.p+"static/media/react-logo-vector-1.4f7abcc3.svg",x=n.p+"static/media/angular-logo-vector-1.5f8cac1e.svg",f=n.p+"static/media/spring-logo-vector.9024f67b.svg",O=n.p+"static/media/rbs-group-logo-vector.2d346905.svg",g=n.p+"static/media/Infosys-01.bc53b446.svg",w=n(0),v=function(e){Object(b.a)(n,e);var t=Object(j.a)(n);function n(e){var s;return Object(d.a)(this,n),(s=t.call(this,e)).state={hideWebDesigns:!0,hideFullStack:!1,hideJava:!1,hidePython:!1,hideTechStack:!0,hideInitial:!1},s}return Object(h.a)(n,[{key:"render",value:function(){return Object(w.jsxs)("div",{children:[Object(w.jsxs)("div",{hidden:this.state.hideInitial,children:[Object(w.jsx)("h4",{className:"App",children:Object(w.jsxs)("code",{style:{color:"blue",fontSize:"20pt"},children:["Welcome to",Object(w.jsx)("br",{}),Object(w.jsx)("span",{className:"name1",children:"Muhamed Halimi's "}),Object(w.jsx)("br",{}),Object(w.jsx)("span",{className:"introLine3",children:"portfolio"})]})}),Object(w.jsxs)("div",{className:"container-fluid c1Big",children:[Object(w.jsx)("p",{className:"introLine4",children:"I'm a full stack engineer with experience in building web applications."}),Object(w.jsx)("p",{className:"introLine5",children:"I strive to continuously improve myself, develop and strengthen skills which will add value to society."})]}),Object(w.jsx)("div",{className:"container-fluid ps-5 pe-5 mt-5 c1Clients",children:Object(w.jsxs)("div",{className:"row",children:[Object(w.jsx)("code",{className:"text-center",style:{color:"blue",fontSize:"17pt"},children:" Client projects"}),Object(w.jsx)("br",{}),Object(w.jsxs)("div",{className:"clientLogos",children:[Object(w.jsx)("img",{className:"rbsLogo",src:O}),Object(w.jsx)("img",{className:"infoSysLogo",src:g})]})]})})]}),Object(w.jsxs)("div",{className:"container-fluid ps-5 pe-5 c1Tec",children:[Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("code",{className:"text-center",style:{color:"blue",fontSize:"17pt"},children:"Technology Stack"})}),Object(w.jsxs)("div",{className:"row c1Tec2",children:[Object(w.jsx)("div",{className:"card-body cardTec",children:Object(w.jsxs)("h5",{className:"card-title",children:[Object(w.jsx)("img",{className:"rstartLogo",src:p})," React"]})}),Object(w.jsx)("div",{className:"card-body cardTec",children:Object(w.jsxs)("h5",{className:"card-title",children:[Object(w.jsx)("img",{className:"astartLogo",src:x})," Angular"]})}),Object(w.jsx)("div",{className:"card-body cardTec",children:Object(w.jsxs)("h5",{className:"card-title",children:[Object(w.jsx)("img",{className:"sstartLogo",src:f})," Spring Boot "]})}),Object(w.jsx)("div",{className:"c1Tec2Button",children:Object(w.jsx)("div",{className:"card bg-warning",style:{width:"250px"},children:Object(w.jsx)("div",{className:"card-body text-center",children:Object(w.jsx)(l.b,{style:{color:"black",fontSize:"21px",textDecoration:"none"},className:"bd-highlight ",to:"/tech-stack",children:"View All  \u2192"})})})})]})]}),Object(w.jsx)("div",{className:"container-fluid ps-5 pe-5 mb-5 c1",hidden:"true",children:Object(w.jsx)("div",{className:"row row-cols-1 row-cols-md-2 row-cols-lg-3",children:Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card",children:Object(w.jsx)("div",{className:"card-body",children:Object(w.jsxs)(l.b,{style:{fontSize:"21px",textDecoration:"none"},className:"bd-highlight",to:"/web-design",children:["Web Designs ",Object(w.jsx)("span",{children:"\u2192"})]})})})})})}),Object(w.jsx)("div",{className:"container-fluid ps-5 pe-5 mb-5 c1",hidden:"true",children:Object(w.jsx)("div",{className:"row row-cols-1 row-cols-md-2 row-cols-lg-3",children:Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card",children:Object(w.jsx)("div",{className:"card-body",children:Object(w.jsxs)(l.b,{style:{fontSize:"21px",textDecoration:"none"},className:"bd-highlight",to:"/full-stack",children:["Full Stack Apps ",Object(w.jsx)("span",{children:"\u2192"})]})})})})})}),Object(w.jsxs)("div",{hidden:this.state.hideJava,className:"container-fluid ps-5 pe-5 c1Java",children:[Object(w.jsx)("div",{className:"row ",children:Object(w.jsx)("code",{className:"text-center",style:{color:"blue"},children:Object(w.jsx)("img",{className:"jLogoMain",src:m})})}),Object(w.jsxs)("div",{className:"row row-cols-1 row-cols-md-2 row-cols-lg-2",children:[Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card mb-3",children:Object(w.jsx)("div",{className:"card-body",children:Object(w.jsx)("h5",{className:"card-title",children:"Words to Numbers "})})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card mb-3",children:Object(w.jsx)("div",{className:"card-body",children:Object(w.jsx)("h5",{className:"card-title",children:"Trailing zeros for factorial number"})})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card mb-3",children:Object(w.jsx)("div",{className:"card-body",children:Object(w.jsx)("h5",{className:"card-title",children:"int32 to IPv4"})})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card",children:Object(w.jsx)("div",{className:"card-body bg-warning",children:Object(w.jsxs)(l.b,{style:{color:"black",fontSize:"21px",textDecoration:"none"},className:"bd-highlight",to:"/java",children:["Explore Java projects ",Object(w.jsx)("span",{children:"\u2192"})]})})})})]})]}),Object(w.jsxs)("div",{hidden:this.state.hidePython,className:"container-fluid ps-5 pe-5 mb-5 c1",children:[Object(w.jsx)("p",{className:"row",children:Object(w.jsx)("code",{className:"text-center",style:{color:"blue"},children:Object(w.jsx)("img",{className:"pLogoMain",src:u})})}),Object(w.jsxs)("div",{className:"row row-cols-1 row-cols-md-2 row-cols-lg-2",children:[Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card mb-3",children:Object(w.jsx)("div",{className:"card-body",children:Object(w.jsx)("h5",{className:"card-title",children:"ASCII File Compression"})})})}),Object(w.jsx)("div",{className:"col",hidden:"true",children:Object(w.jsx)("div",{className:"card mb-3",children:Object(w.jsx)("div",{className:"card-body",children:Object(w.jsx)("h5",{className:"card-title",children:"Mars Satellite Orbit"})})})}),Object(w.jsx)("div",{className:"col",hidden:"true",children:Object(w.jsx)("div",{className:"card mb-3",children:Object(w.jsx)("div",{className:"card-body",children:Object(w.jsx)("h5",{className:"card-title",children:"Network Behaviour"})})})}),Object(w.jsx)("div",{className:"col",hidden:"true",children:Object(w.jsx)("div",{className:"card mb-3",children:Object(w.jsx)("div",{className:"card-body",children:Object(w.jsx)("h5",{className:"card-title",children:"Self-organised Criticality"})})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card",children:Object(w.jsx)("div",{className:"card-body bg-warning",children:Object(w.jsxs)(l.b,{style:{color:"black",fontSize:"21px",textDecoration:"none"},className:"bd-highlight",to:"/python",children:["Explore Python projects ",Object(w.jsx)("span",{children:"\u2192"})]})})})})]})]})]})}}]),n}(i.a.Component),y=function(e){Object(b.a)(n,e);var t=Object(j.a)(n);function n(e){var s;return Object(d.a)(this,n),(s=t.call(this,e)).prevScrollPercent=0,s.drawLength=0,s.handleScroll=function(e){e.preventDefault();var t=s.textInput.current,n=t.getTotalLength();t.getBoundingClientRect(),t.style.strokeDasharray=n+" "+n,t.style.strokeDashoffset=n;var i=(document.documentElement.scrollTop+document.body.scrollTop)/(document.documentElement.scrollHeight-document.documentElement.clientHeight);window.innerWidth<=400?s.drawLength+=i<.2?n*(i-s.prevScrollPercent)*1.5:n*(i-s.prevScrollPercent)*.9:i>=.09&&i<=.14?s.drawLength+=n*(i-s.prevScrollPercent)*5:i>.17&&i<=.5?s.drawLength+=n*(i-s.prevScrollPercent):i>.5&&i<=.8?s.drawLength+=n*(i-s.prevScrollPercent)*.6:i<=.01?s.drawLength=0:s.drawLength+=n*(i-s.prevScrollPercent),t.style.strokeDashoffset=n-s.drawLength,t.style.strokeDasharray=i>=.99?"none":n+" "+n,s.prevScrollPercent=i},s.textInput=i.a.createRef(),s.state={value:""},s}return Object(h.a)(n,[{key:"componentDidMount",value:function(){window.addEventListener("scroll",this.handleScroll,!0)}},{key:"componentWillUnmount",value:function(){window.removeEventListener("scroll",this.handleScroll,!0)}},{key:"render",value:function(){return console.log("re-rendered"),Object(w.jsx)("div",{className:"containerMain",onScroll:this.handleScroll,children:Object(w.jsxs)("div",{className:"containerMain2",style:{width:window.innerWidth<=400?"100%":"1024px"},children:[Object(w.jsx)(v,{}),Object(w.jsxs)("svg",{className:"svgLine",children:[Object(w.jsx)("path",{className:"svgLineTrack",id:"track-path",d:window.innerWidth<=400?"M 186 40 Q 354 92 306 182 C 286 216 182 234 144 290 C 60 384 314.526 475.99 191.66 607.958 Q 15.546 755.332 113.222 888.596 Q 184.944 979.283 109.136 1082.897 C 50.642 1161.864 54.147 1336.691 72.361 1400.726 C 85.011 1443.809 130.196 1456.833 167.645 1429.565 C 207.275 1402.66 202.185 1344.487 136.377 1408.114 C 78.568 1456.47 48.383 1546.463 74.585 1655.016 C 158.038 1959.897 286.092 1898.709 282.555 2049.033 C 289.493 2137.404 93.212 2192.022 118.814 2347.34 L 122.699 2735.506 C 123.135 2759.379 133.525 2759.379 209.805 2902.158 L 68.467 2968.133 L 143.64 3037.446 C 194.232 3079.647 214.218 3090.199 205.404 3143.088 C 162.66 3274.973 58.477 3246.43 68.467 3503.318 L 81.358 3915.726 C 77.309 4174.595 422.174 3833.104 163.98 4208.347 C 28.385 4441.147 225.769 4404.032 279.82 4504.996 C 303.91 4557.992 275.691 4599.289 287.391 4854.638":"M 1242.694 -522.583 V 185.481 H 1092.517 V 256.507 H 979.936 V 300.247 H 1195.066 V 346.721 H 934.878 V 397.786 H 1236.236 V 449.992 H 896.016 V 494.252 H 1196.381 V 542.267 H 940.742 V 586.852 H 1140.69 V 636.582 H 976.357 V 684.597 H 1095.042 V 736.041 H 1029.084 V 929.815 H 1413.757 V 1027.548 H 1032.245 V 1837.302 C 1032.852 1904.344 950.801 1927.358 940.795 1990.397 C 929.788 2097.463 1166.654 2072.831 1182.945 2005.406 C 1199.955 1911.348 1041.858 1924.356 1005.835 2006.407 C 973.816 2088.457 1013.841 2175.511 1014.841 2281.576 V 3016.696 C 1019.546 3125.973 849.977 3224.789 883.556 3346.957 C 929.118 3490.241 1004.976 3633.508 1123.967 3536.372 C 1277.53 3402.007 1506.667 3796.611 1507.689 3934.637 V 3940.432 H 1507.819 V 5118.815"}),Object(w.jsx)("path",{ref:this.textInput,className:"svgLineSection",id:"section-path",d:window.innerWidth<=400?"M 186 40 Q 354 92 306 182 C 286 216 182 234 144 290 C 60 384 314.526 475.99 191.66 607.958 Q 15.546 755.332 113.222 888.596 Q 184.944 979.283 109.136 1082.897 C 50.642 1161.864 54.147 1336.691 72.361 1400.726 C 85.011 1443.809 130.196 1456.833 167.645 1429.565 C 207.275 1402.66 202.185 1344.487 136.377 1408.114 C 78.568 1456.47 48.383 1546.463 74.585 1655.016 C 158.038 1959.897 286.092 1898.709 282.555 2049.033 C 289.493 2137.404 93.212 2192.022 118.814 2347.34 L 122.699 2735.506 C 123.135 2759.379 133.525 2759.379 209.805 2902.158 L 68.467 2968.133 L 143.64 3037.446 C 194.232 3079.647 214.218 3090.199 205.404 3143.088 C 162.66 3274.973 58.477 3246.43 68.467 3503.318 L 81.358 3915.726 C 77.309 4174.595 422.174 3833.104 163.98 4208.347 C 28.385 4441.147 225.769 4404.032 279.82 4504.996 C 303.91 4557.992 275.691 4599.289 287.391 4854.638":"M 1242.694 -522.583 V 185.481 H 1092.517 V 256.507 H 979.936 V 300.247 H 1195.066 V 346.721 H 934.878 V 397.786 H 1236.236 V 449.992 H 896.016 V 494.252 H 1196.381 V 542.267 H 940.742 V 586.852 H 1140.69 V 636.582 H 976.357 V 684.597 H 1095.042 V 736.041 H 1029.084 V 929.815 H 1413.757 V 1027.548 H 1032.245 V 1837.302 C 1032.852 1904.344 950.801 1927.358 940.795 1990.397 C 929.788 2097.463 1166.654 2072.831 1182.945 2005.406 C 1199.955 1911.348 1041.858 1924.356 1005.835 2006.407 C 973.816 2088.457 1013.841 2175.511 1014.841 2281.576 V 3016.696 C 1019.546 3125.973 849.977 3224.789 883.556 3346.957 C 929.118 3490.241 1004.976 3633.508 1123.967 3536.372 C 1277.53 3402.007 1506.667 3796.611 1507.689 3934.637 V 3940.432 H 1507.819 V 5118.815"})]})]})})}}]),n}(i.a.Component),N=(n(21),function(e){Object(b.a)(n,e);var t=Object(j.a)(n);function n(){var e;return Object(d.a)(this,n),(e=t.call(this)).state={hide1:!0,hide2:!0,hide3:!0,hide4:!0,hide5:!0,hide6:!0,hide0:!1},e}return Object(h.a)(n,[{key:"render",value:function(){var e=this;return Object(w.jsxs)("div",{children:[Object(w.jsx)("h1",{className:"javaTop",hidden:this.state.hide0,children:Object(w.jsxs)("code",{style:{color:"blue"},children:[Object(w.jsx)("img",{className:"jLogoJCompile",src:m})," "]})}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"col options",hidden:this.state.hide0,children:Object(w.jsxs)("ul",{className:"list-group text-center",style:{cursor:"pointer"},children:[Object(w.jsx)("li",{className:"list-group-item",onClick:function(){return e.setState({hide1:!0,hide2:!0,hide3:!0,hide4:!0,hide5:!0,hide6:!1,hide0:!0})},children:"Diamonds"}),Object(w.jsx)("li",{className:"list-group-item",onClick:function(){return e.setState({hide1:!0,hide2:!0,hide3:!0,hide4:!0,hide5:!1,hide6:!0,hide0:!0})},children:"Words to Numbers"}),Object(w.jsx)("li",{className:"list-group-item",onClick:function(){return e.setState({hide1:!0,hide2:!0,hide3:!0,hide4:!1,hide5:!0,hide6:!0,hide0:!0})},children:"Trailing Zeros"}),Object(w.jsx)("li",{className:"list-group-item",onClick:function(){return e.setState({hide1:!0,hide2:!0,hide3:!1,hide4:!0,hide5:!0,hide6:!0,hide0:!0})},children:"int32 to IPv4"}),Object(w.jsx)("li",{className:"list-group-item",onClick:function(){return e.setState({hide1:!0,hide2:!1,hide3:!0,hide4:!0,hide5:!0,hide6:!0,hide0:!0})},children:"Number generation with assigned probabilities"})]})})}),Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-md-10 offset-md-1",children:Object(w.jsx)("div",{className:"container-fluid pe-5 mt-5",children:Object(w.jsxs)("div",{className:"row row-cols-1",children:[Object(w.jsx)("div",{className:"col",hidden:this.state.hide6,children:Object(w.jsxs)("div",{className:"mb-5",children:[Object(w.jsx)("h3",{className:"card-title text-center",children:"Diamond Generator"}),Object(w.jsx)("p",{className:"text-center mb-5",children:"Wednesday, 17th November 2021 "}),Object(w.jsxs)("p",{children:["This will return a Diamond with core size of n (n must be odd as no even diamonds). For example, if you want a diamond with core n = 7, output will be:",Object(w.jsx)("br",{}),Object(w.jsx)("div",{className:"col-3 offset-6 col-md-4 offset-md-6 col-lg-5 offset-lg-6",children:Object(w.jsx)("code",{style:{color:"blue"},children:Object(w.jsx)("pre",{children:"\n   *  \n  ***\n *****\n*******\n *****\n  ***\n   * \n                                      "})})}),"For this we build a string with core having n number of *'s, then we build a string for every two *'s that are in our core string. We add these additional strings in beginning of core string and then in reverse order after the core string."]}),Object(w.jsx)("h6",{className:"mb-2",children:" Java Solution:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-5 offset-lg-4",children:Object(w.jsx)("code",{style:{color:"blue"},children:Object(w.jsx)("pre",{children:'\npublic static String print(int n) {\n    if(n%2 == 0 || n < 0){\n      return null;\n    }\n    String coreString = "";\n    String reflectedString = "";\n    for(int i = 0; i < n; i++){\n      coreString += "*";\n    }\n    int spaces = 0;\n    for(int j = n-2; j >= 1; j -= 2){\n      spaces++;\n      String newString = "";\n      for(int y = 0; y < spaces; y++){\n        newString += " ";\n      }\n      for(int x = 0; x < j; x++){\n        newString += "*";\n      }\n      reflectedString += newString + "\\n";\n      newString += "\\n" + coreString;\n      coreString = newString;\n    }\n    String finalString = coreString + "\\n" + reflectedString;\n    return finalString;\n}\n                                      '})})})})})]})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsxs)("div",{className:"mb-5",hidden:this.state.hide5,children:[Object(w.jsx)("h3",{className:"card-title mb-2 text-center",children:"Words to Numbers (up to 1 million)"}),Object(w.jsx)("p",{className:"text-center mb-5",children:"Monday, 15th November 2021 "}),Object(w.jsxs)("p",{children:['This will return the numerical value from the number written using english, for example "twenty-four" will give 24.',Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),'To begin we look at how we will generally translate from words to numbers. Our input will be a string with words separated by a white space and some with a dash ("-"), we will scan this string ans extract the information using a HashMap data structure. The HashMap allows us to store keys and corresponding values, so we can have the key as the word representation of the number and the value as the numerical value.',Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"We look to make this as small as possible to make it efficient as we will be searching through this HashMap. So we only store most important information from which we can extract everything else. The core numbers from 0 to 10, form basis of almost all numbers, 11 to 20 will be needed too as they don't form basis and are unique e.g. eleven doesn't have the word \"one\", the 10s all the way up to 100 - twenty, thirty, forty, ..., ninety, and finally 100, 1000, 100000 and 1000000.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"If we look at a few cases of written numbers above the core ones (0-20) we start to see a pattern emerge:",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("p",{className:"text-center",children:' twenty-one => twenty one: search for "twenty" and "one", then add to get 21 '}),"So numbers up to 100 will be simple, it's just summing the numbers if more than 1 digit, if just 1 digit just take from HashMap. Another case:",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("p",{className:"text-center",children:' one hundred and two => one hundred two: search for "one", "hundred" and "two" '}),Object(w.jsx)("br",{}),'Here we need to multiply the first "one" with the "hundred" after it, then add "two": (1 x 100) + 2 = 102. So we need to make sure we check whether there are any of the "hundred", "thousand", "hundred-thousand" or "million" words after our number word, and then multiply these with our number. This is important for larger numbers, for example:',Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("p",{className:"text-center",children:' seven hundred thousand: search for "seven", multiply by 100 and 1000 = 700,000 '}),"Another case:",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsxs)("p",{className:"text-center",children:[' two hundred and ten thousand: search for "two", multiply by 100 ',Object(w.jsx)("span",{style:{color:"blue"},children:"and 1000"}),', search for "ten" multiply by 1000, add these two: 200,000 + 10,000 = 210,000']}),Object(w.jsx)("br",{}),'Here we have to realise that our "two" needs to be multiplied by both 100 and 1000, so we search for extra multiples of ten after our first and make sure to include these.',Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"We have stored only 32 numbers in our HashMap yet we are able to translate from words to give us 1,000,000 different numbers!"]}),Object(w.jsx)("h6",{className:"mb-2",children:" Java Solution:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-5 offset-lg-4",children:Object(w.jsx)("code",{style:{color:"blue"},children:Object(w.jsx)("pre",{children:'\npublic static int wordToNumber(String numStr) {\n      System.out.println("Input number = " + numStr);\n      HashMap<String, Integer> numbersMap = new HashMap<String, Integer>();\n      numbersMap.put("zero",0);\n      numbersMap.put("one",1);\n      numbersMap.put("two",2);\n      numbersMap.put("three",3);\n      numbersMap.put("four",4);\n      numbersMap.put("five",5);\n      numbersMap.put("six",6);\n      numbersMap.put("seven",7);\n      numbersMap.put("eight",8);\n      numbersMap.put("nine",9);\n      numbersMap.put("ten",10);\n     \n      numbersMap.put("eleven",11);\n      numbersMap.put("twelve",12);\n      numbersMap.put("thirteen",13);\n      numbersMap.put("fourteen",14);\n      numbersMap.put("fifteen",15);\n      numbersMap.put("sixteen",16);\n      numbersMap.put("seventeen",17);\n      numbersMap.put("eighteen",18);\n      numbersMap.put("nineteen",19);\n     \n      numbersMap.put("twenty",20);\n      numbersMap.put("thirty",30);\n      numbersMap.put("forty",40);\n      numbersMap.put("fifty",50);\n      numbersMap.put("sixty",60);\n      numbersMap.put("seventy",70);\n      numbersMap.put("eighty",80);\n      numbersMap.put("ninety",90);\n     \n      numbersMap.put("hundred",100);\n      numbersMap.put("thousand",1000);\n      numbersMap.put("hundred-thousand",100000);\n      numbersMap.put("million",1000000);\n     \n      String[] words = numStr.split(" ");\n      //numbers less 100\n      if(words.length==1){\n        String[] words2 = numStr.split("-");\n        if(words2.length==1){\n          return numbersMap.get(words[0]);\n        }\n        else{\n          int number1 = numbersMap.get(words2[0]);\n          int number2 = numbersMap.get(words2[1]);\n          return number1 + number2;\n        }\n      }\n      //for numbers larger than or == 100\n      else{\n        int finalN = 0;\n        ArrayList<Integer> intNumbers = new ArrayList<>();\n        for(String n:words){\n          String[] str1 = n.split("-");\n          if(!(n.equals("and"))){\n              if(str1.length==1){\n                intNumbers.add(numbersMap.get(n));\n              }\n              else if(str1[0].equals("hundred") && str1[1].equals("thousand")){\n                intNumbers.add(numbersMap.get(n));\n              }\n              else{\n                int number1 = numbersMap.get(str1[0]);\n                int number2 = numbersMap.get(str1[1]);\n                intNumbers.add(number1 + number2);\n              }\n            }\n          }\n        var currentN = 0;\n        for(int i = 0; i<intNumbers.size()-1;i++){\n          currentN = intNumbers.get(i);\n          if(intNumbers.get(i+1)==100 ||\n            intNumbers.get(i+1)==1000 ||\n            intNumbers.get(i+1)==100000){\n           \n            if(i<intNumbers.size()-2){\n              if(intNumbers.get(i+2)==1000){\n                currentN *= intNumbers.get(i+1)*intNumbers.get(i+2);\n              }        \n              else if(i<intNumbers.size()-3){\n                if(intNumbers.get(i+3)==1000){\n                  currentN *= intNumbers.get(i+1)*intNumbers.get(i+3);\n                }\n                else if(intNumbers.get(i)==100 ||\n                        intNumbers.get(i)==1000 ||\n                        intNumbers.get(i)==100000){\n                            currentN =0;\n                }\n                else{\n                  currentN *= intNumbers.get(i+1);\n                }\n              }\n              else if(intNumbers.get(i)==100 ||\n                      intNumbers.get(i)==1000 ||\n                      intNumbers.get(i)==100000){\n                        currentN =0;\n              }\n              else{\n                currentN *= intNumbers.get(i+1);\n              }\n            }\n            else if(intNumbers.get(i)==100 ||\n            intNumbers.get(i)==1000 ||\n            intNumbers.get(i)==100000){\n                currentN =0;\n            }\n            else {\n                currentN *= intNumbers.get(i+1);\n              }\n          }\n          else if(i>=intNumbers.size()-2){\n            i=intNumbers.size()-1;\n            currentN = intNumbers.get(i);\n          }\n          else if(intNumbers.get(i)==100 ||\n            intNumbers.get(i)==1000 ||\n            intNumbers.get(i)==100000){\n            currentN =0;\n          }\n          else{\n            currentN = intNumbers.get(i+1);\n          }\n          finalN += currentN;\n          if(i==intNumbers.size()-1){\n            System.out.println("Output number = "+finalN);\n            return finalN;\n          }\n          if((intNumbers.get(intNumbers.size()-1)==100\n             || intNumbers.get(intNumbers.size()-1)==1000\n            || intNumbers.get(intNumbers.size()-1)==100000)\n            &&\n            i == intNumbers.size()-2\n            ){\n            //System.out.println("Output number = "+finalN);\n            return finalN;\n          }\n        }\n      }\n      return -1;\n    }\n}\n                                      '})})})})})]})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsxs)("div",{className:"mb-5",hidden:this.state.hide4,children:[Object(w.jsx)("h3",{className:"card-title mb-2 text-center",children:"Trailing zeros in factorial number"}),Object(w.jsx)("p",{className:"text-center mb-5",children:"Wednesday, 10th November 2021 "}),Object(w.jsxs)("p",{children:["This will return the number of zeros at the end of the factorial of a number n ",Object(w.jsx)("span",{style:{color:"blue"},children:" without actually calculating the factorial."}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"If we look at first few factorial numbers we start to see a pattern emerge:",Object(w.jsx)("br",{}),Object(w.jsxs)("p",{className:"text-center",children:["10! = ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"10"})," x 9 x 8 x 7 x 6 x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"5"})," x 4 x 3 x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"2"})," x 1 "]}),Object(w.jsxs)("p",{className:"text-center",children:["10! = 9 x 8 x 7 x 6 x 4 x 3 x 1 x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"10"})," x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"10"})]}),"This gives us two zeros at the end of 10! as any number n multiplied by 10 will have a zero at the end, here we have two tens so two zeros. The rule is everytime we multiply by 10 we will have another zero at the end.",Object(w.jsx)("br",{}),Object(w.jsxs)("p",{className:"text-center",children:["20! = ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"20"})," x 19 x 18 x 17 x 16 x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"15"})," x 14 x 13 x 12 x 11 x 10! "]}),Object(w.jsxs)("p",{className:"text-center",children:["20! = ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"2"})," x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"10"})," x 19 x 18 x 17 x 16 x 3 x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"5"})," x 14 x 13 x 12 x 11 x 10! "]}),Object(w.jsxs)("p",{className:"text-center",children:["20! = 19 x 18 x 17 x 16 x 14 x 13 x 12 x 11 x 3 x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"10"})," x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"10"})," x 10! "]}),"Now we have two more tens and also two from 10! which means we have 4 zeros at the end of 20!. Another rule is that for every 5 we get in our multiples, we will always have a 2 which we can multiply it with to get a 10.",Object(w.jsx)("span",{style:{color:"blue"},children:" Therefore we see that for every 5 we have in our number we will add one zero to the end of its factorial. "}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"Interestingly, once we reach 25! we will have an extra 5 multiple because 25 = 5 x 5, and we will have another 2 which will give us another factor of 10. We will need to account for this in our approach. If we then continue and look at 125! this will give an additional multiple of 5 because 125 = 5 x 5 x 5, so we need to include this too.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"So now another pattern emerges (keeping in mind every 5 multiple will multiply with a 2 to give us a factor of 10, and so another zero):",Object(w.jsx)("br",{}),Object(w.jsxs)("p",{className:"text-center",children:["Every 5 = 5 x 1 ",Object(w.jsx)("span",{style:{color:"blue"},children:" (+1 zero)"})]}),Object(w.jsxs)("p",{className:"text-center",children:["Every 25 = 5 x 5 ",Object(w.jsx)("span",{style:{color:"blue"},children:" (+2 zeros)"})]}),Object(w.jsxs)("p",{className:"text-center",children:["Every 125 = 5 x 5 x 5 ",Object(w.jsx)("span",{style:{color:"blue"},children:" (+3 zeros)"})]}),Object(w.jsxs)("p",{className:"text-center",children:["Every 625 = 5 x 5 x 5 x 5 ",Object(w.jsx)("span",{style:{color:"blue"},children:" (+4 zeros)"})]}),Object(w.jsx)("p",{className:"text-center",children:"..."}),"We see that we will have extra zeros for every multiple of 5 which fits into our number. Therefore, loop through for each multiple of 5^n and calculate how many of those fit in our number, then this amount will be the number of zeros to add."]}),Object(w.jsx)("h6",{className:"mb-2",children:" Java Solution:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-5 offset-lg-4",children:Object(w.jsx)("code",{style:{color:"blue"},children:Object(w.jsx)("pre",{children:"\npublic static int zeros(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n <= 5) {\n            return 1;\n        } else {\n            int trailingZeros = 0;\n            for (int i = 5; i < n; i *= 5) {\n                int remainder = n % i;\n                int no5 = n - remainder;\n                int thisManyFit = no5 / i;\n                trailingZeros += thisManyFit;\n            }\n            return trailingZeros;\n        }\n    }\n}\n                                      "})})})})})]})}),Object(w.jsx)("div",{className:"col",hidden:this.state.hide3,children:Object(w.jsxs)("div",{className:"mb-5",children:[Object(w.jsx)("h3",{className:"card-title mb-2 text-center",children:"int32 to IPv4"}),Object(w.jsx)("p",{className:"text-center mb-5",children:"Tuesday, 9th November 2021 "}),Object(w.jsxs)("p",{children:["This will return the IPv4 representation from a 32 bit integer.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"An IP address is used as a unique identifier for a computer on a network so that it can communicate with other computers. IPv4 uses 4 bytes with a full stop after each to represent this unique identifier, like 128.128.128.0 or 255.255.255.255, with each number having maximum value of 255 as they are stored using 8 bits.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"We speak a bit about this bit representation of numerical numbers. The code used to convert between binary and numbers, where n is index of binary number starting from 0:",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsxs)("p",{children:[Object(w.jsxs)("table",{className:"table table-bordered",children:[Object(w.jsx)("caption",{children:"Table 1"}),Object(w.jsxs)("tbody",{children:[Object(w.jsxs)("tr",{children:[Object(w.jsx)("td",{children:"n"}),Object(w.jsx)("td",{children:"7"}),Object(w.jsx)("td",{children:"6"}),Object(w.jsx)("td",{children:"5"}),Object(w.jsx)("td",{children:"4"}),Object(w.jsx)("td",{children:"3"}),Object(w.jsx)("td",{children:"2"}),Object(w.jsx)("td",{children:"1"}),Object(w.jsx)("td",{children:"0"})]}),Object(w.jsxs)("tr",{children:[Object(w.jsx)("td",{children:"2^n"}),Object(w.jsx)("td",{children:"128"}),Object(w.jsx)("td",{children:"64"}),Object(w.jsx)("td",{children:"32"}),Object(w.jsx)("td",{children:"16"}),Object(w.jsx)("td",{children:"8"}),Object(w.jsx)("td",{children:"4"}),Object(w.jsx)("td",{children:"2"}),Object(w.jsx)("td",{children:"1"})]})]})]}),"This table is used to go from binary (1's and 0's) to numerical numbers, if we have a 1 we add the corresponding 2^n number to our sum and if we have a 0 we skip it. For example, in binary, 101 (which in 8 bits is 00000101) is equal to 5:",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsxs)("table",{className:"table table-bordered",children:[Object(w.jsx)("caption",{children:"Table 2"}),Object(w.jsxs)("tbody",{children:[Object(w.jsxs)("tr",{children:[Object(w.jsx)("td",{children:"n"}),Object(w.jsx)("td",{children:"7"}),Object(w.jsx)("td",{children:"6"}),Object(w.jsx)("td",{children:"5"}),Object(w.jsx)("td",{children:"4"}),Object(w.jsx)("td",{children:"3"}),Object(w.jsx)("td",{children:"2"}),Object(w.jsx)("td",{children:"1"}),Object(w.jsx)("td",{children:"0"})]}),Object(w.jsxs)("tr",{children:[Object(w.jsx)("td",{children:"2^n"}),Object(w.jsx)("td",{children:"128"}),Object(w.jsx)("td",{children:"64"}),Object(w.jsx)("td",{children:"32"}),Object(w.jsx)("td",{children:"16"}),Object(w.jsx)("td",{children:"8"}),Object(w.jsx)("td",{className:"table-warning",children:"4"}),Object(w.jsx)("td",{children:"2"}),Object(w.jsx)("td",{className:"table-warning",children:"1"})]}),Object(w.jsxs)("tr",{children:[Object(w.jsx)("td",{children:"Binary"}),Object(w.jsx)("td",{children:"0"}),Object(w.jsx)("td",{children:"0"}),Object(w.jsx)("td",{children:"0"}),Object(w.jsx)("td",{children:"0"}),Object(w.jsx)("td",{children:"0"}),Object(w.jsx)("td",{className:"table-info",children:"1"}),Object(w.jsx)("td",{children:"0"}),Object(w.jsx)("td",{className:"table-info",children:"1"})]})]})]}),"Here only sum values in yellow which have a corresponding binary value of 1 in blue, so 4 + 1 = 5."]}),"So a IPv4 will have 4 of these 8 bit binary numbers, for example 128.0.0.0 is 10000000.00000000.00000000.00000000, if we remove the full stops we get 32 bit binary number, so now 128.0.0.0 is 10000000000000000000000000000000. We use the 32-bit to numerical number to retrieve the numerical value of this, which is similar to before but we just keep increasing n until 32. Here, 10000000000000000000000000000000 would be 2^31 (31 here because we start from 0 not 1 for index value) which is equal to 2147483648.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"This program will return the IPv4 format from a 32 bit binary integer value.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"First step is to convert our number to 32 bit binary, then we split the 32 bit binary number into 4 pieces of 8 bits, then we convert each of these 8 bit binary numbers to numerical values to get the IPv4 representation.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"So we first take 2^n (starting from n=31 to n=0) and check whether it fits in our number, if it fits we then place a 1 in that index of our 32 bit binary number, if not we place a zero instead. If 2^n fits we subtract 2^n from our number and repeat until we have full binary representation. A short example:",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"If we have the number 17, using table 1 above, we check:",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsxs)("p",{className:"text-center",children:["17 - 128 = - 111, this doesn't fit, place 0 in 8th index,",Object(w.jsx)("br",{}),"17 - 64 = -47, this doesn't fit, place 0 in 7th index,",Object(w.jsx)("br",{}),"17 - 32 = -15, this doesn't fit, place 0 in 6th index,",Object(w.jsx)("br",{}),"16 - 16 = 1, this fits, place 1 in 5th index, next number is 1,",Object(w.jsx)("br",{}),"1 - 8 = -7, this doesn't fit, place 0 in 4th index,",Object(w.jsx)("br",{}),"1 - 4 = -3, this doesn't fit, place 0 in 3rd index,",Object(w.jsx)("br",{}),"1 - 2 = -1, this doesn't fit, place 0 in 2nd index,",Object(w.jsx)("br",{}),"1 - 1 = 0, this fits, place 1 in 1st index."]}),"Therefore, we have 17 = 00010001 (index starts from 0 from right to left). We use this approach with our larger number and obtain the 32 bit binary number. Then split this 32 bit binary number into 4 from left to right, leaving us with 4 8 bit binary numbers. Then final step is using table 1 to convert these 8 bit binary numbers to their numerical representation."]}),Object(w.jsx)("h6",{className:"mb-2",children:" Java Solution:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-5 offset-lg-4",children:Object(w.jsx)("code",{style:{color:"blue"},children:Object(w.jsx)("pre",{children:'\npublic static String longToIP(long ip) {\n    String bitNo = "";\n    for(int i = 31; i >= 0; i--){\n      ip -= (long) Math.pow(2,i);\n      if(ip >= 0){\n        bitNo += 1;\n      }\n      else{\n        bitNo += 0;\n        ip += (long) Math.pow(2,i);\n      }\n    }\n    String IPv4 = "";\n    for(int i = 0; i < bitNo.length(); i+=8){\n      String ip8 = bitNo.substring(i,i+8);\n      Long numberNo = (long) 0;\n      for(int j = 7; j >= 0; j--){\n        if(ip8.substring(j,j+1).equals("1")){\n          numberNo += (long) Math.pow(2,7-j);\n        }\n      }\n      if(i == (bitNo.length()-8)){\n        IPv4 += numberNo;\n      }\n      else{\n        IPv4 += numberNo + ".";\n      }\n    }\n    System.out.println(IPv4);\n    return IPv4;\n  }\n}\n                                      '})})})})})]})}),Object(w.jsx)("div",{className:"col",hidden:this.state.hide2,children:Object(w.jsxs)("div",{className:"mb-5",children:[Object(w.jsx)("h3",{className:"card-title text-center",children:"Number generation with assigned probabilities"}),Object(w.jsx)("p",{className:"text-center mb-5",children:"Monday, 8th November 2021 "}),Object(w.jsxs)("p",{children:["This will produce a number generator which will generate a number from given set of numbers with corresponding probability.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"We will produce a new list consisting of 100 numbers. As we want the selection of any of our numbers to be selected with a certain probability, we will insert each number with a frequency corresponding to the probability. To do this we multiply each probability by 100 and round this number, then we add this many times.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"For example, if we have list [1, 2, 3] and we want them to be selected with corresponding probabilities [0.1, 0.5, 0.4], then we would have 10 number 1's, 50 number 2's and 40 number 3's.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"We then select a random number from our list of 100 numbers and it will give us the desired result."]}),Object(w.jsx)("h6",{className:"mb-2",children:" Java Solution:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-5 offset-lg-4",children:Object(w.jsx)("code",{style:{color:"blue"},children:Object(w.jsx)("pre",{children:"\npublic class RandomGen {\n    public ArrayList numbers = new ArrayList();\n    public RandomGen(int[] a, double[] b) { \n        float sum = 0;\n        if (b.length == 0) { //generates probabilities for you if none given\n            for (int i = 0; i < a.length; i++) {\n                Random random = new Random();\n                b[i] = random.nextFloat();\n                sum += b[i];\n            }\n        } else {\n            for (int i = 0; i < a.length; i++) {\n                sum += b[i];\n            }\n        }\n        for (int i = 0; i < a.length; i++) { //normalise probability\n            b[i] = b[i] / sum;\n        }\n        for (int i = 0; i < a.length; i++) {\n            for (int j = 0; j < (a[i] * 100); j++)\n                numbers.add(a[i]);\n        }\n    }\n    public int nextNum() {\n        Random rand = new Random();\n        return (int) this.numbers.get(rand.nextInt(numbers.size()));\n    }\n}\n// main function when running\npublic static void main(String[] args) {\n        int[] inputNumber = {1, 2, 3};\n        double[] inputProbabilities = {0.1,0.5,0.4};\n        RandomGen randomGen = new RandomGen(inputNumber, inputProbabilities);\n        int runs = 100;\n        for (int i = 0; i < runs; i++) {\n            int number = randomGen.nextNum();\n            System.out.println(number);\n        }\n}\n                                      "})})})})})]})})]})})})}),Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-6 offset-3 col-md-4 offset-md-4 mb-5",hidden:!this.state.hide0,children:Object(w.jsx)("ul",{className:"list-group",style:{cursor:"pointer"},children:Object(w.jsx)("li",{className:"list-group-item text-center bg-primary text-white",onClick:function(){return e.setState({hide1:!0,hide2:!0,hide3:!0,hide4:!0,hide5:!0,hide6:!0,hide0:!1})},children:"Back to list of projects"})})})})]})}}]),n}(i.a.Component)),k=function(e){Object(b.a)(n,e);var t=Object(j.a)(n);function n(){return Object(d.a)(this,n),t.apply(this,arguments)}return Object(h.a)(n,[{key:"render",value:function(){return Object(w.jsx)("div",{children:Object(w.jsx)(N,{})})}}]),n}(i.a.Component),S=k,T=(n(22),n.p+"static/media/image1.8dd770c1.png"),z=n.p+"static/media/image2.b41a2ff5.png",C=n.p+"static/media/image3.dfdb8e61.png",M=n.p+"static/media/image4.7bfe7301.png",I=n.p+"static/media/image5.99196982.png",L=n.p+"static/media/image6.336f29c1.png",_=n.p+"static/media/networksA.d49a216c.png",H=n.p+"static/media/networksB.fb5b83b0.png",A=n.p+"static/media/networksC.896c9635.png",P=n.p+"static/media/networksD.6f842fed.png",B=function(e){Object(b.a)(n,e);var t=Object(j.a)(n);function n(){var e;return Object(d.a)(this,n),(e=t.call(this)).state={hide1:!0,hide2:!0,hide3:!0,hide4:!0,hide5:!0,hide6:!0,hide0:!1},e}return Object(h.a)(n,[{key:"render",value:function(){var e=this;return Object(w.jsxs)("div",{children:[Object(w.jsx)("h1",{className:"pTop ",hidden:this.state.hide0,children:Object(w.jsxs)("code",{style:{color:"blue"},children:[Object(w.jsx)("img",{className:"pLogoPython",src:u})," "]})}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"col options",hidden:this.state.hide0,children:Object(w.jsxs)("ul",{className:"list-group text-center",style:{cursor:"pointer"},children:[Object(w.jsx)("li",{className:"list-group-item",onClick:function(){return e.setState({hide1:!0,hide2:!0,hide3:!0,hide4:!0,hide5:!0,hide6:!1,hide0:!0})},children:"ASCII File Compression"}),Object(w.jsx)("li",{className:"list-group-item",onClick:function(){return e.setState({hide1:!0,hide2:!0,hide3:!0,hide4:!0,hide5:!1,hide6:!0,hide0:!0})},hidden:"true",children:"Network Behaviour"}),Object(w.jsx)("li",{className:"list-group-item",onClick:function(){return e.setState({hide1:!0,hide2:!0,hide3:!0,hide4:!1,hide5:!0,hide6:!0,hide0:!0})},hidden:"true",children:"Self-organised Criticality"})]})})}),Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-md-10 offset-md-1",children:Object(w.jsx)("div",{className:"container-fluid ps-5 pe-5 mt-5",children:Object(w.jsxs)("div",{className:"row row-cols-1",children:[Object(w.jsx)("div",{className:"col",hidden:this.state.hide6,children:Object(w.jsxs)("div",{className:"mb-5",children:[Object(w.jsx)("h2",{className:"card-title text-center",children:"ASCII File Compression"}),Object(w.jsx)("p",{className:"text-center mb-5",children:"Monday, 26th June 2017 "}),Object(w.jsxs)("p",{style:{textAlign:"justify"},children:["The Python programming language has been used to implement three different compression algorithms. Run-length encoding, Huffman and Lempel-Ziv were successfully produced and were used to compress text files. Bitmap images were also compressed using RLE. RLE achieved a compression rate of 115 for a line image. Huffman was best for literature text files less than 50 kb. Lempel-Ziv had the best compression rate of 2.25 for literature text files and was best for files greater than 50 kb.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("h4",{children:"Introduction"}),"File compression is the process which reduces the size of a file for storage. There are various methods which are employed depending on the file type and size. The methods of compressing text (ASCII) and Bitmap files which are investigated in this report are Run-length encoding (RLE), Huffman and Lempel-Ziv (LZ). Reducing the size of files for storage frees up space and allows more to be stored. More importantly, it speeds up the process of transferring files through the internet and other networks which may be heavily congested.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"Data compression has been around since Morse code was developed in 1838. More advanced methods to be used with computers were developed later on. Huffman compression was introduced in 1951 by David Huffman, where he worked on optimising the method of using probability blocks to assign codewords to letters. This method was developed as technology improved, and lead to all data compression being done using the Huffman coding in the 1970s. During the late 1970s, Lempel and Ziv produced the Lempel-Ziv method which used pointer encoding.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),'Files are stored as binary in computers. Binary is the representation of data at the most basic level. This means the level at which the computer processor can read it. Binary is either a one or a zero representing on/off states, this is because logic gates operate on this principle. Computers store data in segments of 8 bits which is one byte. ASCII (American Standard Code for Information Interchange) is simply a format for text files. ASCII represents letters and symbols used in English text using 8 bits per character. There can be up to 256 characters represented using 8 bits per character. Text files are saved with the ".txt" extension. The number of characters that can be stored, N, is given by N = 2^n, where n is the number of bits per character.',Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"In Python strings are a type of class used to represent text files. There are many ways to manipulate strings. They can be modified letter by letter which means pieces of text can be split into lists of words or characters.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"Bitmap and vector imaging are two methods to produce images. Bitmap uses pixels which are assigned a colour and position. Each pixel uses 24 bits for colour images or 8 bits for black and white. Vector images use mathematical formulas to produce curves and shapes. Only Bitmap images are compressed in this investigation. Lossless compression is carried out and it means that no information is lost during the process of compression and decompression. Lossy is the opposite, where some information is lost but the lost information is not as important.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("h4",{children:"Implementing Run-length Encoding, Huffman and Lempel-Ziv"}),"For each method the algorithm is taken and then transformed into code in the Python programming language. Each algorithm is run using literature text files, and only run-length encoding is run with image files. Some images are taken from the internet and some are produced using Paint, for example line images are made on Paint. Graphs are then plotted to compare the compression rates and the time taken for compression. The text files are also found online and each one is different both in the genre and the actual text. This is so that it can be seen how each algorithm handles these differences.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),'Run-length encoding (RLE) is done by counting the amount of characters and storing this information as a string. The string has the characters and then the number of characters. To implement this approach a counter was set up. While loops were used to count and check whether the character was repeated. After the character changes counting the next one starts. When complete the file is saved as a string. This is shown by figure 1. In order to decompress RLE, the compressed file is read and the program reads the letter and the corresponding number, n. Then it prints the letter n times. This was done using a while loop to cycle through the characters. Bitmap images were compressed by turning them into binary files which could then be treated as a list of characters. RLE compression was used for the bitmap images. Images are collected from the internet and saved as bitmap images using the ".bmp" extension. The types of images are different and include fractals, landscapes, text on backgrounds and human faces.',Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("img",{src:M,alt:"-",style:{width:"100%"}}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("h6",{className:"mb-2",children:" Run-length Encoding Python code:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-9 offset-lg-3",children:Object(w.jsx)("code",{style:{color:"darkBlue"},children:Object(w.jsx)("pre",{children:'\nimport time as time\nimport array as ar\nimport os\nfrom heapq import heappush, heappop, heapify\nimport pickle\nimport numpy as np\nfrom io import StringIO\n\ndef characters(file):\n    with open(file,\'r\') as f:\n        return [character for line in f.readlines() for character in line]\ndef characterset(file): #lists all characters used in text\n    characterset=set(characters(file))\n    return(characterset)\ndef character_dictionary(file): #dictionary of characters\n    characterdictionary={}\n    for i in characterset(file):\n        characterdictionary.update({i:characters(file).count(i)})\n    return(characterdictionary)  \n        \ndef runlengthcode(file):\n    run_length_info=[]\n    time_initial=time.time()\n    characterlist=characters(file)\n    lettersdictionary=[]\n    i=0\n    n=1\n    while i<len(characterlist)-n:\n        while i+n<len(characterlist) and characterlist[i]==characterlist[i+n]:\n            n+=1\n        else:\n            lettersdictionary.append(str(len(characterlist[i:i+n])))\n            lettersdictionary.append(characterlist[i])\n            i+=n\n            n=1\n    final=\'\'.join(lettersdictionary)\n    run_length_file = open("runlengthcompressed.txt","w")\n    run_length_file.write(final)\n    print(final)\n    run_length_file.close()\n    size_run_length=os.path.getsize("runlengthcompressed.txt")\n    time_final=time.time()\n    time_difference=time_final - time_initial\n    run_length_info.append(size_run_length)\n    run_length_info.append(time_difference)\n    return(run_length_info)\n                                      '})})})})}),Object(w.jsx)("h6",{className:"mb-2",children:" Run-length Decompression Python code:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-9 offset-lg-3",children:Object(w.jsx)("code",{style:{color:"darkBlue"},children:Object(w.jsx)("pre",{children:"\ndef RLE_decompression():\n    file=open('runlengthcompressed.txt',\"r+\")\n    mystring=file.readline(100)\n    mystringlist=[]\n    i = 0\n    while i < len(mystring)-1:\n        mystringlist.append([int(mystring[i]),mystring[i+1]])\n        i+=2\n\n    decompression=[]\n    for i in mystringlist:\n        y = i[0]\n        while y>0:\n            decompression.append(i[1])\n            y=y-1\n        \n    decompression=''.join(decompression)\n    print(decompression)\n                                      "})})})})}),'Huffman encoding is implemented by using a frequency tree with probability blocks. As the probability of a letter is proportional to its frequency, a frequency of each letter is tabled. The tree is produced by assigning the frequency as the probability of the character. Higher probabilities are placed at the top of the tree and lower probabilities towards the bottom of the tree. To build the Huffman tree, the lower frequency letters are used at the bottom. When adding another letter to the tree its probability must be the lowest of all the letters that can be added to the tree but are not in the tree yet. Each character is assigned a binary number, going left along a branch a zero is assigned, and going right along a branch, a one is assigned. To encode the character, the tree branch is followed until the letter is reached as shown in figure 3. This is the key part of the compression because the most repeated letters are represented with the least amount of bits. To implement this into Python code, the function "heapq" is used because it produces a binary tree analogous to the Huffman tree.',Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),'A separate function called "encodehuffman" is made to produce this tree. Then another function called "huffman" is produced which takes the tree and then outputs the binary representation of the word. When saving this in binary machine code, the Huffman encoding is split into 8 bit sequences because this is how data is stored in computers.',Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("img",{src:I,alt:"-",style:{width:"100%"}}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("img",{src:T,alt:"-",style:{width:"100%"}}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"In order to decompress using the Huffman method, the tree needs to be saved and sent alongside the binary encoding. Each binary digit is read and used as a map to find the corresponding character. The directions are left for a 0 and right for a 1. As the encoded binary in saved as 8 bit sequences, the 8 bit sequences are joined together to form a single string when decoding. This is because the Huffman encoding will not necessarily be in 8 bit sequences due to the nature of the Huffman tree. As shown in figure 2, each letter will have a different binary representation and different length. Therefore, when encoding the exact binary representation of the character will not fit exactly 8 bits. A while loop is used to cycle through the binary digits. As each binary digit is read the encoding will lead the computer to the end of a tree branch. At this point the program is told to stop reading binary, and to translate the scanned binary up until this point by using the Huffman tree. Once a translation to text occurs the program continues to scan the binary and produces the rest of the text using the same method.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("h6",{className:"mb-2",children:" Huffman Compression Python code:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-9 offset-lg-3",children:Object(w.jsx)("code",{style:{color:"darkBlue"},children:Object(w.jsx)("pre",{children:"\nimport time as time\nimport array as ar\nimport os\nfrom heapq import heappush, heappop, heapify\nimport pickle\nimport numpy as np\nfrom io import StringIO\n\ndef characters(file):\n    with open(file,'r') as f:\n        return [character for line in f.readlines() for character in line]\ndef characterset(file): #lists all characters used in text\n    characterset=set(characters(file))\n    return(characterset)\ndef character_dictionary(file): #dictionary of characters\n    characterdictionary={}\n    for i in characterset(file):\n        characterdictionary.update({i:characters(file).count(i)})\n    return(characterdictionary)\n    \ndef encodehuffman(symb2freq): #frequency count and builds tree\n    \"\"\"Huffman encode the given dict mapping symbols to weights\"\"\"\n    heap = [[wt,[sym,\"\"]] for sym, wt in symb2freq.items() ]\n    heapify(heap)\n    while len(heap) > 1:\n        lo = heappop(heap)\n        hi = heappop(heap)\n        for pair in lo[1:]:\n            pair[1] = '0' + pair[1]\n        for pair in hi[1:]:\n            pair[1] = '1' + pair[1]\n        heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:])\n    return sorted(heappop(heap)[1:], key = lambda p: (len(p[-1]),p))\ndef huffman(file): # uses tree to encode files\n    time_initial=time.time()\n    huffman_info=[]\n    code=encodehuffman(character_dictionary(file))\n    finaldict = {}\n    codedict = {}\n    j = 0\n    while j<len(code):\n        codedict.update({code[j][0]:code[j][1]})\n        j=j+1\n    k=0\n    while k<len(code):\n        finaldict.update({code[k][1]:code[k][0]})\n        k=k+1\n    final=''\n    for i in characters(file):\n        final = final+str(codedict[i])\n    finallist =[]\n    for i in final:\n        finallist.append(i)\n    final = str(final)\n    k=0\n    anotherlist=[]\n    while k<len(finallist)-8:\n        anotherlist.append(str(''.join(finallist[k:k+8])))\n        k=k+8\n    else:\n        number=(str(''.join(finallist[k:len(finallist)]) ) )\n        extrabits=8-len(number)\n        while len(number)!=8:\n            number+='0'\n        anotherlist.append(number)\n    with open('decompressionkey.pickle', 'wb') as handle:\n        pickle.dump(finaldict, handle, protocol=pickle.HIGHEST_PROTOCOL)\n    bin_array=ar.array('B')\n    for i in anotherlist:\n        bin_array.append(int(i,2))\n    size=(len(bin_array))\n    f = open('newfile.txt','wb')\n    bin_array.tofile(f)\n    f.close()\n    f1=open('filesize.txt','w')\n    f1.write( (str(size)+','+str(extrabits) ))\n    f1.close()\n    time_final=time.time()\n    time_difference=time_final - time_initial\n    size_huffman=os.path.getsize(\"newfile.txt\")\n    huffman_info.append(size_huffman)\n    huffman_info.append(time_difference)\n    return(huffman_info)\n                                      "})})})})}),Object(w.jsx)("h6",{className:"mb-2",children:" Huffman Decompression Python code:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-9 offset-lg-3",children:Object(w.jsx)("code",{style:{color:"darkBlue"},children:Object(w.jsx)("pre",{children:"\ndef huffman_decompression():\n    time_initial= time.time()\n    f= open('newfile.txt', 'rb')\n    ra = ar.array('B')\n    sizefile=open('filesize.txt', 'r+')\n    sizefileline = sizefile.readline()\n    size = ''\n    while len(sizefileline)!=0:\n        for i in sizefileline:\n            size=size+str(i)\n        sizefileline = sizefile.readline()\n    size=size.split(',')\n    sizeoffile=int(size[0])\n    extrabits=int(size[1])\n    ra.fromfile(f,int(sizeoffile))\n    result=[]\n    for c in ra:\n        result.append('{0:08b}'.format(c))\n    binarycode = result\n    result=''.join(result)\n    with open('decompressionkey.pickle', 'rb') as handle:\n        b = pickle.load(handle)\n    decompressionkey = b\n    binary={}\n    for i in decompressionkey.keys():\n        binary.update({i:len(i)})\n    maxlength = max(binary.values())\n    minlength = min(binary.values())\n    finaltext = ''\n    p = 0\n    k = minlength\n    while p+k<= len(result)-extrabits:\n        if result[p:p+k] not in binary:\n            k+=1\n        else:\n            finaltext+=str(decompressionkey[result[p:p+k]])\n            p+=k\n            k=minlength\n    file = open(\"decompressed_huffman.txt\",\"w\")\n    file.write(finaltext)\n    print(finaltext)\n    file.close()\n                                      "})})})})}),'Lempel-Ziv compression is based on pointer encoding. This means that it stores data and has a method to find it. Initially, a python dictionary of ASCII values up to 256 is produced. Input text is looped over. Each character is checked to see whether it is in the dictionary already. If the character is in the dictionary then it is not added but instead the next character is taken and the two are joined to form one set. This new set of characters is then checked against the dictionary. If it is not in the dictionary then it is added to the dictionary in a new slot outside the defined ASCII range. The previous character ASCII value is added to a list. For the first few words there will be little compression as there is little repetition. This means the first few values in the list will be actual ASCII defined values, which is an important point for the decompression. Once a pair of characters has been checked the process begins again for the next pair as shown in figure 3. At the end of this process the data is stored as binary. For this investigation 16 bits were used per character because after running a long piece of text such as "Hamlet" the dictionary size increases to around 44000. This mean that 16 bits would allow all these values to be represented. From equation 1, n=16 so N = 65536 which covers the range for large files. To save these 16 bit characters, they are written two bytes at a time using the "array" function.',Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("img",{src:L,alt:"-",style:{width:"100%"}}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"To decompress using the Lempel-Ziv method, the same approach is taken as with the compression. There is no need to send the new dictionary along side the compressed file to decompress. When decompressing, an ASCII dictionary is produced however this time the key and values are flipped. Now the dictionary key is the ASCII value and the dictionary value is the character string. The decompression process is then implemented in the exact same way as with the compression but now it is run with numbers as the input. A potential problem with not sending the dictionary is that there will be undefined numbers as they are outside the ASCII range. This works without the compressed dictionary because the first few characters will be saved as defined ASCII values. So when the numbers are run through the code, the new dictionary formed will produce pairs in the dictionary which will be saved as the value outside the ASCII range. Therefore, when the code comes across the value which is outside the ASCII range it will be pointed to the value stored in the new dictionary which will translate to the defined ASCII values (see figure 5).",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("img",{src:z,alt:"-",style:{width:"90%"}}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("h6",{className:"mb-2",children:" Lempel-Ziv Compression Python code:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-9 offset-lg-3",children:Object(w.jsx)("code",{style:{color:"darkBlue"},children:Object(w.jsx)("pre",{children:"\nimport time as time\nimport array as ar\nimport os\nfrom heapq import heappush, heappop, heapify\nimport pickle\nimport numpy as np\nfrom io import StringIO\n\ndef characters(file):\n    with open(file,'r') as f:\n        return [character for line in f.readlines() for character in line]\ndef characterset(file): #lists all characters used in text\n    characterset=set(characters(file))\n    return(characterset)\ndef character_dictionary(file): #dictionary of characters\n    characterdictionary={}\n    for i in characterset(file):\n        characterdictionary.update({i:characters(file).count(i)})\n    return(characterdictionary)\n                                            \ndef lempelziv(file):\n    time_initial=time.time()\n    lempelziv_info=[]\n    dictionary_lempel_ziv = {}\n    ascii = 256\n    i =0\n    while i < ascii:\n        dictionary_lempel_ziv.update({chr(i):i})\n        i+=1\n    current = \"\"\n    text = ar.array('H')\n    for i in ''.join(characters(file)):\n        currentnext = current +i\n        if currentnext in dictionary_lempel_ziv:\n            current = currentnext\n        elif currentnext not in dictionary_lempel_ziv:\n            text.append(dictionary_lempel_ziv[current])\n            dictionary_lempel_ziv[currentnext] = ascii\n            ascii = ascii + 1\n            current = i\n    text.append(dictionary_lempel_ziv[current])\n    print('Compressed machine/ASCII values:')\n    print(text)\n    lempel_ziv_file = open('compressed_text','wb')\n    text.tofile(lempel_ziv_file)\n    lempel_ziv_file.close()\n    size_lempel_ziv=os.path.getsize(\"compressed_text\")\n    time_final =time.time()\n    time_difference = time_final - time_initial\n    lempelziv_info.append(size_lempel_ziv)\n    lempelziv_info.append(time_difference)\n    return(lempelziv_info)\n                                      "})})})})}),Object(w.jsx)("h6",{className:"mb-2",children:" Lempel-Ziv Decompression Python code:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-9 offset-lg-3",children:Object(w.jsx)("code",{style:{color:"darkBlue"},children:Object(w.jsx)("pre",{children:"\ndef LZ_decompression():\n    f=open('compressed_text','rb')\n    ra=ar.array('H')\n    while True:\n        try:\n            ra.fromfile(f,100)\n        except EOFError:\n            break\n    print(\"Compressed ASCII: \")\n    print(ra)\n    text=ra.tolist()\n    dictionary = {}\n    ascii =256\n    i=0\n    while i <ascii:\n        dictionary.update({i:chr(i)})\n        i+=1\n    decompressed = StringIO()\n    w = chr(text.pop(0))\n    decompressed.write(w)\n    for k in text:\n        if k in dictionary:\n            entry = dictionary[k]\n        elif k == ascii:\n            entry = w + w[0]\n        decompressed.write(entry)\n        dictionary[ascii] = w + entry[0]\n        ascii += 1\n        w = entry\n    \n    file = open(\"Decompressed_LZ.txt\",\"w\")\n    file.write(decompressed.getvalue())\n    print(decompressed.getvalue())\n    file.close()\n                                      "})})})})}),Object(w.jsx)("h4",{children:"Analysis"}),'All three algorithms were implemented and did compress the size of files. Each algorithm preformed better than the others for different types and sizes of text. Run-length encoding (RLE) worked best for repeated characters, e.g "aaaaabbbbbcccc", but not for any literature. Huffman produced the best compression rates for small text which is not repeated. From figure (a) below, Huffman was shown to compress best when the file size was under 50 kb. Lempel-Ziv outperformed RLE compression for all literature. LZ did best when the file size exceeded 50 kb as shown in figure (a) below. Lempel-Ziv compression produced the highest compression rate of 2.25 for literature text files.',Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),'RLE increased the size of all literature texts. This is seen in figure (a) where the RLE points lie on a straight line at a compression rate of 0.5. This is because literature text does not have many repeated characters in a row. As RLE counts the number of consecutive character repeats and then stores the character with the number of its repeats, it will be expected to increase the file size. This number is expected to be around double the original size and so the compression rate should be 0.5 which it is. The reason for this is because on average characters are repeated once in long pieces of literature. Therefore RLE saves each character as the character and a "1". And so each letter is now stored using twice as much space so overall it double the size of the file for text.',Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"Huffman compression maintained a stable compression rate across the large range of file sizes. The line for Huffman compression shown in figure (a) shows it decreases with increasing file size. The decrease is not very steep and nearly flat. This is expected because the Huffman algorithm is based on assigning probabilities to characters in the text. As for long pieces of text the frequency of characters reaches a equal level because of the nature of words. Words consist of characters, and are unchangeable entities which means they form the fundamental building blocks of sentences and so the whole text. As the amount of connectives, verbs and nouns used is proportionate in general literature the words used will eventually be repeated in equal amounts. This leads to the equal probability of finding a character for long pieces of text. Therefore, when building the probability tree for long pieces of text the difference in probabilities for each character decreases so the methods effectiveness decreases. Huffman was better than Lempel-Ziv for the smaller files because Lempel-Ziv relies on repetitions of combinations of characters in the text. There is little repetition for small files of literature text and so the Lempel-Ziv algorithm is not optimised for small files.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"For very small files (\xab1 kb), LZ compression actually increases the size as the compression rate is less than 1. This is due to the lack of repetition in small files. On the other hand, for text which is more than a paragraph it does compress. In fact, Lempel-Ziv compression performed best for files above 50 kb because the amount of repetitions increasing as the file size increase for literature text. Repetition increase due to the same reason which was explained earlier. This means that the dictionary formed by the LZ algorithm becomes more effective as the file becomes larger and more repetitive. The LZ curve in figure (a) shows that it may reach a limit as the graphs gradient decreases at a lower rate after the 50 kb point. A limit must be reached because the dictionary will eventually include very large chunks of the text and so it will make little difference if another character is added to these large sets of characters.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("img",{src:C,alt:"-",style:{width:"100%"}}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{})]})]})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsxs)("div",{className:"mb-5",hidden:this.state.hide5,children:[Object(w.jsx)("h3",{className:"card-title mb-2 text-center",children:"Network Behaviour: The Barabasi-Albert Model"}),Object(w.jsx)("p",{className:"text-center mb-5",children:"Monday, 25th March 2019 "}),Object(w.jsxs)("p",{children:["The aim of this project is to investigate the behaviour and properties of growing networks. Using the Barabasi and Albert model (BA model), theoretical derivations for the degree distribution will be compared to numerical simulation data. It is important to know that the numerical results are not exact and theoretical derivations use assumptions such as infinite networks. Visual and statistical methods will be deployed to assess how well the theory matches the numerical data. Three cases of node attachment will be explored. First the preferential attachment, then random attachment, and lastly an attachment which allows self-loops and a mixed preferential and random attachment.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("h4",{children:"Pure Preferential Attachment"}),Object(w.jsx)("br",{}),Object(w.jsx)("h5",{children:"Numerical Implementation"}),"The BA model was implemented in python 3.6.4. A simple algorithm was used to produce a growing network. The BA model works by first producing a graph and then adding nodes as well as edges according to the preferential attachment case. A unit of time was adding one node. This was repeated until the set number of total nodes N were added. More specifically, a list of degrees of the nodes was produced and updated as edges were added.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"Edges were added by first attaching one end to the new node, and then selecting an existing node, with a probability proportional to the nodes degree, to attach the other end of the edge. This was achieved by randomly selecting an edge from a list of existing edges and then randomly selecting a node from that pair. This works because the nodes with higher degree will appear in more edges and so randomly selecting from this edge list will ensure that it is more likely to select a node with higher degree k. To avoid self-loops, this process was redone if the resulting node was itself until another node was selected. Overflow errors were overcome by using \u2019float128\u2019 variables.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("h5",{children:"Initial Graph"}),"A equally weighted graph with three nodes was used initially. This was done so that there was an equal probability for each node being attached to for the first addition. A small network was selected because it allows to see network growth also relative to the end size of the network, it is a better approximation to the graph growing to infinity which is assumed in theoretical derivations.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("h5",{children:"Type of Graph"}),"Networks are classified by their edge types. The graph I am creating will have no directed edges and will allow multiple edges between the same pair of nodes. There will be no self- loops for preferential attachment and the number of nodes increases with time. Therefore, the type of network I am creating is a growing weighted network.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("h5",{children:"Working Code"}),"To check that my program is working correctly, I check that new nodes and edges are being added by showing a visualisation of the network as in figure (1). Figure (1a,1b,1c) shows the first three time steps with nodes and edges correctly being added, and then fig- ure(1d) shows the final network which was set to 1000 nodes for this test. The final network shows the preferential attachment as there is a higher relative density of edges to the nodes on the centre right. The number of nodes and the number of edges are shown to always be conserved.",Object(w.jsxs)("div",{className:"fig1",children:[Object(w.jsx)("img",{src:_,alt:"-",style:{width:"25%"}}),Object(w.jsx)("img",{src:H,alt:"-",style:{width:"25%"}}),Object(w.jsx)("img",{src:A,alt:"-",style:{width:"25%"}}),Object(w.jsx)("img",{src:P,alt:"-",style:{width:"25%"}})]}),"Figure 1: The evolution of the graph is shown. The initial graph (a) has three nodes which all have the same degree equal to two. Figure (b) shows the first node added which connects both its new edges to the same existing node. Figure (c) shows the next node introduced and that it connects it\u2019s edges to two different nodes. Figure (d) shows the final network, where it can be seen from the relative density of the edges that the nodes on the right have a higher degree. This shows the preferential attachment.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsxs)("p",{className:"text-center",children:[' two hundred and ten thousand: search for "two", multiply by 100 ',Object(w.jsx)("span",{style:{color:"blue"},children:"and 1000"}),', search for "ten" multiply by 1000, add these two: 200,000 + 10,000 = 210,000']}),Object(w.jsx)("br",{}),'Here we have to realise that our "two" needs to be multiplied by both 100 and 1000, so we search for extra multiples of ten after our first and make sure to include these.',Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"We have stored only 32 numbers in our HashMap yet we are able to translate from words to give us 1,000,000 different numbers!"]}),Object(w.jsx)("h6",{className:"mb-2",children:" Java Solution:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-5 offset-lg-4",children:Object(w.jsx)("code",{children:Object(w.jsx)("pre",{children:'\npublic static int wordToNumber(String numStr) {\n      System.out.println("Input number = " + numStr);\n      HashMap<String, Integer> numbersMap = new HashMap<String, Integer>();\n      numbersMap.put("zero",0);\n      numbersMap.put("one",1);\n      numbersMap.put("two",2);\n      numbersMap.put("three",3);\n      numbersMap.put("four",4);\n      numbersMap.put("five",5);\n      numbersMap.put("six",6);\n      numbersMap.put("seven",7);\n      numbersMap.put("eight",8);\n      numbersMap.put("nine",9);\n      numbersMap.put("ten",10);\n     \n      numbersMap.put("eleven",11);\n      numbersMap.put("twelve",12);\n      numbersMap.put("thirteen",13);\n      numbersMap.put("fourteen",14);\n      numbersMap.put("fifteen",15);\n      numbersMap.put("sixteen",16);\n      numbersMap.put("seventeen",17);\n      numbersMap.put("eighteen",18);\n      numbersMap.put("nineteen",19);\n     \n      numbersMap.put("twenty",20);\n      numbersMap.put("thirty",30);\n      numbersMap.put("forty",40);\n      numbersMap.put("fifty",50);\n      numbersMap.put("sixty",60);\n      numbersMap.put("seventy",70);\n      numbersMap.put("eighty",80);\n      numbersMap.put("ninety",90);\n     \n      numbersMap.put("hundred",100);\n      numbersMap.put("thousand",1000);\n      numbersMap.put("hundred-thousand",100000);\n      numbersMap.put("million",1000000);\n     \n      String[] words = numStr.split(" ");\n      //numbers less 100\n      if(words.length==1){\n        String[] words2 = numStr.split("-");\n        if(words2.length==1){\n          return numbersMap.get(words[0]);\n        }\n        else{\n          int number1 = numbersMap.get(words2[0]);\n          int number2 = numbersMap.get(words2[1]);\n          return number1 + number2;\n        }\n      }\n      //for numbers larger than or == 100\n      else{\n        int finalN = 0;\n        ArrayList<Integer> intNumbers = new ArrayList<>();\n        for(String n:words){\n          String[] str1 = n.split("-");\n          if(!(n.equals("and"))){\n              if(str1.length==1){\n                intNumbers.add(numbersMap.get(n));\n              }\n              else if(str1[0].equals("hundred") && str1[1].equals("thousand")){\n                intNumbers.add(numbersMap.get(n));\n              }\n              else{\n                int number1 = numbersMap.get(str1[0]);\n                int number2 = numbersMap.get(str1[1]);\n                intNumbers.add(number1 + number2);\n              }\n            }\n          }\n        var currentN = 0;\n        for(int i = 0; i<intNumbers.size()-1;i++){\n          currentN = intNumbers.get(i);\n          if(intNumbers.get(i+1)==100 ||\n            intNumbers.get(i+1)==1000 ||\n            intNumbers.get(i+1)==100000){\n           \n            if(i<intNumbers.size()-2){\n              if(intNumbers.get(i+2)==1000){\n                currentN *= intNumbers.get(i+1)*intNumbers.get(i+2);\n              }        \n              else if(i<intNumbers.size()-3){\n                if(intNumbers.get(i+3)==1000){\n                  currentN *= intNumbers.get(i+1)*intNumbers.get(i+3);\n                }\n                else if(intNumbers.get(i)==100 ||\n                        intNumbers.get(i)==1000 ||\n                        intNumbers.get(i)==100000){\n                            currentN =0;\n                }\n                else{\n                  currentN *= intNumbers.get(i+1);\n                }\n              }\n              else if(intNumbers.get(i)==100 ||\n                      intNumbers.get(i)==1000 ||\n                      intNumbers.get(i)==100000){\n                        currentN =0;\n              }\n              else{\n                currentN *= intNumbers.get(i+1);\n              }\n            }\n            else if(intNumbers.get(i)==100 ||\n            intNumbers.get(i)==1000 ||\n            intNumbers.get(i)==100000){\n                currentN =0;\n            }\n            else {\n                currentN *= intNumbers.get(i+1);\n              }\n          }\n          else if(i>=intNumbers.size()-2){\n            i=intNumbers.size()-1;\n            currentN = intNumbers.get(i);\n          }\n          else if(intNumbers.get(i)==100 ||\n            intNumbers.get(i)==1000 ||\n            intNumbers.get(i)==100000){\n            currentN =0;\n          }\n          else{\n            currentN = intNumbers.get(i+1);\n          }\n          finalN += currentN;\n          if(i==intNumbers.size()-1){\n            System.out.println("Output number = "+finalN);\n            return finalN;\n          }\n          if((intNumbers.get(intNumbers.size()-1)==100\n             || intNumbers.get(intNumbers.size()-1)==1000\n            || intNumbers.get(intNumbers.size()-1)==100000)\n            &&\n            i == intNumbers.size()-2\n            ){\n            //System.out.println("Output number = "+finalN);\n            return finalN;\n          }\n        }\n      }\n      return -1;\n    }\n}\n                                      '})})})})})]})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsxs)("div",{className:"mb-5",hidden:this.state.hide4,children:[Object(w.jsx)("h3",{className:"card-title mb-2 text-center",children:"Trailing zeros in factorial number"}),Object(w.jsx)("p",{className:"text-center mb-5",children:"Wednesday, 10th November 2021 "}),Object(w.jsxs)("p",{children:["This will return the number of zeros at the end of the factorial of a number n ",Object(w.jsx)("span",{style:{color:"blue"},children:" without actually calculating the factorial."}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"If we look at first few factorial numbers we start to see a pattern emerge:",Object(w.jsx)("br",{}),Object(w.jsxs)("p",{className:"text-center",children:["10! = ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"10"})," x 9 x 8 x 7 x 6 x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"5"})," x 4 x 3 x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"2"})," x 1 "]}),Object(w.jsxs)("p",{className:"text-center",children:["10! = 9 x 8 x 7 x 6 x 4 x 3 x 1 x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"10"})," x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"10"})]}),"This gives us two zeros at the end of 10! as any number n multiplied by 10 will have a zero at the end, here we have two tens so two zeros. The rule is everytime we multiply by 10 we will have another zero at the end.",Object(w.jsx)("br",{}),Object(w.jsxs)("p",{className:"text-center",children:["20! = ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"20"})," x 19 x 18 x 17 x 16 x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"15"})," x 14 x 13 x 12 x 11 x 10! "]}),Object(w.jsxs)("p",{className:"text-center",children:["20! = ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"2"})," x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"10"})," x 19 x 18 x 17 x 16 x 3 x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"5"})," x 14 x 13 x 12 x 11 x 10! "]}),Object(w.jsxs)("p",{className:"text-center",children:["20! = 19 x 18 x 17 x 16 x 14 x 13 x 12 x 11 x 3 x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"10"})," x ",Object(w.jsx)("span",{style:{backgroundColor:"lightblue"},children:"10"})," x 10! "]}),"Now we have two more tens and also two from 10! which means we have 4 zeros at the end of 20!. Another rule is that for every 5 we get in our multiples, we will always have a 2 which we can multiply it with to get a 10.",Object(w.jsx)("span",{style:{color:"blue"},children:" Therefore we see that for every 5 we have in our number we will add one zero to the end of its factorial. "}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"Interestingly, once we reach 25! we will have an extra 5 multiple because 25 = 5 x 5, and we will have another 2 which will give us another factor of 10. We will need to account for this in our approach. If we then continue and look at 125! this will give an additional multiple of 5 because 125 = 5 x 5 x 5, so we need to include this too.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"So now another pattern emerges (keeping in mind every 5 multiple will multiply with a 2 to give us a factor of 10, and so another zero):",Object(w.jsx)("br",{}),Object(w.jsxs)("p",{className:"text-center",children:["Every 5 = 5 x 1 ",Object(w.jsx)("span",{style:{color:"blue"},children:" (+1 zero)"})]}),Object(w.jsxs)("p",{className:"text-center",children:["Every 25 = 5 x 5 ",Object(w.jsx)("span",{style:{color:"blue"},children:" (+2 zeros)"})]}),Object(w.jsxs)("p",{className:"text-center",children:["Every 125 = 5 x 5 x 5 ",Object(w.jsx)("span",{style:{color:"blue"},children:" (+3 zeros)"})]}),Object(w.jsxs)("p",{className:"text-center",children:["Every 625 = 5 x 5 x 5 x 5 ",Object(w.jsx)("span",{style:{color:"blue"},children:" (+4 zeros)"})]}),Object(w.jsx)("p",{className:"text-center",children:"..."}),"We see that we will have extra zeros for every multiple of 5 which fits into our number. Therefore, loop through for each multiple of 5^n and calculate how many of those fit in our number, then this amount will be the number of zeros to add."]}),Object(w.jsx)("h6",{className:"mb-2",children:" Java Solution:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-5 offset-lg-4",children:Object(w.jsx)("code",{children:Object(w.jsx)("pre",{children:"\npublic static int zeros(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n <= 5) {\n            return 1;\n        } else {\n            int trailingZeros = 0;\n            for (int i = 5; i < n; i *= 5) {\n                int remainder = n % i;\n                int no5 = n - remainder;\n                int thisManyFit = no5 / i;\n                trailingZeros += thisManyFit;\n            }\n            return trailingZeros;\n        }\n    }\n}\n                                      "})})})})})]})}),Object(w.jsx)("div",{className:"col",hidden:this.state.hide3,children:Object(w.jsxs)("div",{className:"mb-5",children:[Object(w.jsx)("h3",{className:"card-title mb-2 text-center",children:"int32 to IPv4"}),Object(w.jsx)("p",{className:"text-center mb-5",children:"Tuesday, 9th November 2021 "}),Object(w.jsxs)("p",{children:["This will return the IPv4 representation from a 32 bit integer.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"An IP address is used as a unique identifier for a computer on a network so that it can communicate with other computers. IPv4 uses 4 bytes with a full stop after each to represent this unique identifier, like 128.128.128.0 or 255.255.255.255, with each number having maximum value of 255 as they are stored using 8 bits.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"We speak a bit about this bit representation of numerical numbers. The code used to convert between binary and numbers, where n is index of binary number starting from 0:",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsxs)("p",{children:[Object(w.jsxs)("table",{className:"table table-bordered",children:[Object(w.jsx)("caption",{children:"Table 1"}),Object(w.jsxs)("tbody",{children:[Object(w.jsxs)("tr",{children:[Object(w.jsx)("td",{children:"n"}),Object(w.jsx)("td",{children:"7"}),Object(w.jsx)("td",{children:"6"}),Object(w.jsx)("td",{children:"5"}),Object(w.jsx)("td",{children:"4"}),Object(w.jsx)("td",{children:"3"}),Object(w.jsx)("td",{children:"2"}),Object(w.jsx)("td",{children:"1"}),Object(w.jsx)("td",{children:"0"})]}),Object(w.jsxs)("tr",{children:[Object(w.jsx)("td",{children:"2^n"}),Object(w.jsx)("td",{children:"128"}),Object(w.jsx)("td",{children:"64"}),Object(w.jsx)("td",{children:"32"}),Object(w.jsx)("td",{children:"16"}),Object(w.jsx)("td",{children:"8"}),Object(w.jsx)("td",{children:"4"}),Object(w.jsx)("td",{children:"2"}),Object(w.jsx)("td",{children:"1"})]})]})]}),"This table is used to go from binary (1's and 0's) to numerical numbers, if we have a 1 we add the corresponding 2^n number to our sum and if we have a 0 we skip it. For example, in binary, 101 (which in 8 bits is 00000101) is equal to 5:",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsxs)("table",{className:"table table-bordered",children:[Object(w.jsx)("caption",{children:"Table 2"}),Object(w.jsxs)("tbody",{children:[Object(w.jsxs)("tr",{children:[Object(w.jsx)("td",{children:"n"}),Object(w.jsx)("td",{children:"7"}),Object(w.jsx)("td",{children:"6"}),Object(w.jsx)("td",{children:"5"}),Object(w.jsx)("td",{children:"4"}),Object(w.jsx)("td",{children:"3"}),Object(w.jsx)("td",{children:"2"}),Object(w.jsx)("td",{children:"1"}),Object(w.jsx)("td",{children:"0"})]}),Object(w.jsxs)("tr",{children:[Object(w.jsx)("td",{children:"2^n"}),Object(w.jsx)("td",{children:"128"}),Object(w.jsx)("td",{children:"64"}),Object(w.jsx)("td",{children:"32"}),Object(w.jsx)("td",{children:"16"}),Object(w.jsx)("td",{children:"8"}),Object(w.jsx)("td",{className:"table-warning",children:"4"}),Object(w.jsx)("td",{children:"2"}),Object(w.jsx)("td",{className:"table-warning",children:"1"})]}),Object(w.jsxs)("tr",{children:[Object(w.jsx)("td",{children:"Binary"}),Object(w.jsx)("td",{children:"0"}),Object(w.jsx)("td",{children:"0"}),Object(w.jsx)("td",{children:"0"}),Object(w.jsx)("td",{children:"0"}),Object(w.jsx)("td",{children:"0"}),Object(w.jsx)("td",{className:"table-info",children:"1"}),Object(w.jsx)("td",{children:"0"}),Object(w.jsx)("td",{className:"table-info",children:"1"})]})]})]}),"Here only sum values in yellow which have a corresponding binary value of 1 in blue, so 4 + 1 = 5."]}),"So a IPv4 will have 4 of these 8 bit binary numbers, for example 128.0.0.0 is 10000000.00000000.00000000.00000000, if we remove the full stops we get 32 bit binary number, so now 128.0.0.0 is 10000000000000000000000000000000. We use the 32-bit to numerical number to retrieve the numerical value of this, which is similar to before but we just keep increasing n until 32. Here, 10000000000000000000000000000000 would be 2^31 (31 here because we start from 0 not 1 for index value) which is equal to 2147483648.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"This program will return the IPv4 format from a 32 bit binary integer value.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"First step is to convert our number to 32 bit binary, then we split the 32 bit binary number into 4 pieces of 8 bits, then we convert each of these 8 bit binary numbers to numerical values to get the IPv4 representation.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"So we first take 2^n (starting from n=31 to n=0) and check whether it fits in our number, if it fits we then place a 1 in that index of our 32 bit binary number, if not we place a zero instead. If 2^n fits we subtract 2^n from our number and repeat until we have full binary representation. A short example:",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"If we have the number 17, using table 1 above, we check:",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsxs)("p",{className:"text-center",children:["17 - 128 = - 111, this doesn't fit, place 0 in 8th index,",Object(w.jsx)("br",{}),"17 - 64 = -47, this doesn't fit, place 0 in 7th index,",Object(w.jsx)("br",{}),"17 - 32 = -15, this doesn't fit, place 0 in 6th index,",Object(w.jsx)("br",{}),"16 - 16 = 1, this fits, place 1 in 5th index, next number is 1,",Object(w.jsx)("br",{}),"1 - 8 = -7, this doesn't fit, place 0 in 4th index,",Object(w.jsx)("br",{}),"1 - 4 = -3, this doesn't fit, place 0 in 3rd index,",Object(w.jsx)("br",{}),"1 - 2 = -1, this doesn't fit, place 0 in 2nd index,",Object(w.jsx)("br",{}),"1 - 1 = 0, this fits, place 1 in 1st index."]}),"Therefore, we have 17 = 00010001 (index starts from 0 from right to left). We use this approach with our larger number and obtain the 32 bit binary number. Then split this 32 bit binary number into 4 from left to right, leaving us with 4 8 bit binary numbers. Then final step is using table 1 to convert these 8 bit binary numbers to their numerical representation."]}),Object(w.jsx)("h6",{className:"mb-2",children:" Java Solution:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-5 offset-lg-4",children:Object(w.jsx)("code",{children:Object(w.jsx)("pre",{children:'\npublic static String longToIP(long ip) {\n    String bitNo = "";\n    for(int i = 31; i >= 0; i--){\n      ip -= (long) Math.pow(2,i);\n      if(ip >= 0){\n        bitNo += 1;\n      }\n      else{\n        bitNo += 0;\n        ip += (long) Math.pow(2,i);\n      }\n    }\n    String IPv4 = "";\n    for(int i = 0; i < bitNo.length(); i+=8){\n      String ip8 = bitNo.substring(i,i+8);\n      Long numberNo = (long) 0;\n      for(int j = 7; j >= 0; j--){\n        if(ip8.substring(j,j+1).equals("1")){\n          numberNo += (long) Math.pow(2,7-j);\n        }\n      }\n      if(i == (bitNo.length()-8)){\n        IPv4 += numberNo;\n      }\n      else{\n        IPv4 += numberNo + ".";\n      }\n    }\n    System.out.println(IPv4);\n    return IPv4;\n  }\n}\n                                      '})})})})})]})}),Object(w.jsx)("div",{className:"col",hidden:this.state.hide2,children:Object(w.jsxs)("div",{className:"mb-5",children:[Object(w.jsx)("h3",{className:"card-title text-center",children:"Number generation with assigned probabilities"}),Object(w.jsx)("p",{className:"text-center mb-5",children:"Monday, 8th November 2021 "}),Object(w.jsxs)("p",{children:["This will produce a number generator which will generate a number from given set of numbers with corresponding probability.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"We will produce a new list consisting of 100 numbers. As we want the selection of any of our numbers to be selected with a certain probability, we will insert each number with a frequency corresponding to the probability. To do this we multiply each probability by 100 and round this number, then we add this many times.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"For example, if we have list [1, 2, 3] and we want them to be selected with corresponding probabilities [0.1, 0.5, 0.4], then we would have 10 number 1's, 50 number 2's and 40 number 3's.",Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),"We then select a random number from our list of 100 numbers and it will give us the desired result."]}),Object(w.jsx)("h6",{className:"mb-2",children:" Java Solution:"}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-sm-9 offset-sm-3 col-md-7 offset-md-3 col-lg-5 offset-lg-4",children:Object(w.jsx)("code",{children:Object(w.jsx)("pre",{children:"\npublic class RandomGen {\n    public ArrayList numbers = new ArrayList();\n    public RandomGen(int[] a, double[] b) { \n        float sum = 0;\n        if (b.length == 0) { //generates probabilities for you if none given\n            for (int i = 0; i < a.length; i++) {\n                Random random = new Random();\n                b[i] = random.nextFloat();\n                sum += b[i];\n            }\n        } else {\n            for (int i = 0; i < a.length; i++) {\n                sum += b[i];\n            }\n        }\n        for (int i = 0; i < a.length; i++) { //normalise probability\n            b[i] = b[i] / sum;\n        }\n        for (int i = 0; i < a.length; i++) {\n            for (int j = 0; j < (a[i] * 100); j++)\n                numbers.add(a[i]);\n        }\n    }\n    public int nextNum() {\n        Random rand = new Random();\n        return (int) this.numbers.get(rand.nextInt(numbers.size()));\n    }\n}\n// main function when running\npublic static void main(String[] args) {\n        int[] inputNumber = {1, 2, 3};\n        double[] inputProbabilities = {0.1,0.5,0.4};\n        RandomGen randomGen = new RandomGen(inputNumber, inputProbabilities);\n        int runs = 100;\n        for (int i = 0; i < runs; i++) {\n            int number = randomGen.nextNum();\n            System.out.println(number);\n        }\n}\n                                      "})})})})})]})})]})})})}),Object(w.jsx)("div",{className:"row",children:Object(w.jsx)("div",{className:"col-6 offset-3 col-md-4 offset-md-4 mb-5",hidden:!this.state.hide0,children:Object(w.jsx)("ul",{className:"list-group",style:{cursor:"pointer"},children:Object(w.jsx)("li",{className:"list-group-item text-center bg-primary text-white",onClick:function(){return e.setState({hide1:!0,hide2:!0,hide3:!0,hide4:!0,hide5:!0,hide6:!0,hide0:!1})},children:"Back to list of projects"})})})})]})}}]),n}(i.a.Component),q=function(e){Object(b.a)(n,e);var t=Object(j.a)(n);function n(){return Object(d.a)(this,n),t.apply(this,arguments)}return Object(h.a)(n,[{key:"render",value:function(){return Object(w.jsx)("div",{children:Object(w.jsx)(B,{})})}}]),n}(i.a.Component),E=q,R=n.p+"static/media/img1.1147bb6f.png";var W=function(){return Object(w.jsxs)("div",{children:[Object(w.jsx)("h4",{className:"App p-5",children:Object(w.jsx)("code",{style:{color:"blue"},children:"Demo 1"})}),Object(w.jsx)("div",{className:"container-fluid",children:Object(w.jsxs)("div",{className:"row",children:[Object(w.jsxs)("div",{className:"card mb-5 ms-5 me-5",id:"cardDemo2",children:[Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("div",{className:"imgBx",children:Object(w.jsx)("img",{src:R})})]}),Object(w.jsxs)("div",{className:"card mb-5 ms-5 me-5",id:"cardDemo",children:[Object(w.jsx)("div",{className:"imgBx",children:Object(w.jsx)("img",{src:R})}),Object(w.jsxs)("div",{className:"contentBx",children:[Object(w.jsx)("h3",{children:"Wireless headphones"}),Object(w.jsxs)("h2",{className:"price",children:["$40.",Object(w.jsx)("small",{children:"99"})]}),Object(w.jsx)("a",{href:"#",className:"buy",children:"Buy Now"})]})]}),Object(w.jsxs)("div",{className:"card mb-5 ms-5",id:"cardDemo3",children:[Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("div",{className:"contentBx"})]})]})})]})};n(23);var F=function(){return Object(w.jsx)("div",{children:Object(w.jsxs)("div",{className:"card cd1",children:[Object(w.jsx)("div",{className:"card mb-5",id:"demo2",children:Object(w.jsxs)("div",{className:"contentBx",children:[Object(w.jsx)("h3",{children:"Nav"}),Object(w.jsx)("span",{id:"s1",children:"Opt1"}),Object(w.jsx)("span",{id:"s2",children:"Opt2"}),Object(w.jsx)("span",{id:"s3",children:"Opt3"}),Object(w.jsx)("span",{id:"s4",children:"Opt4"}),Object(w.jsx)("span",{id:"s5",children:"Contact us"})]})}),Object(w.jsx)("div",{className:"card mb-5",id:"demo3",children:Object(w.jsxs)("div",{className:"contentBx",children:[Object(w.jsx)("h3",{children:"nav"}),Object(w.jsxs)("span",{id:"s1",children:[Object(w.jsx)("span",{id:"l1"}),"Opt1"]}),Object(w.jsxs)("span",{id:"s2",children:[Object(w.jsx)("span",{id:"l1"}),"Opt2"]}),Object(w.jsxs)("span",{id:"s3",children:[Object(w.jsx)("span",{id:"l1"}),"Opt3"]}),Object(w.jsxs)("span",{id:"s4",children:[Object(w.jsx)("span",{id:"l1"}),"Opt4"]}),Object(w.jsxs)("span",{id:"s5",children:[Object(w.jsx)("span",{id:"l1"}),"Contact us"]})]})}),Object(w.jsx)("div",{className:"card mb-5",id:"demo3",children:Object(w.jsxs)("div",{className:"contentBx",children:[Object(w.jsxs)("div",{className:"card mb-5 ms-5",id:"cardDemo3",children:[Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("span",{}),Object(w.jsx)("div",{className:"contentBx"})]}),Object(w.jsx)("h3",{children:"nav"}),Object(w.jsxs)("span",{id:"s1",children:[Object(w.jsx)("span",{id:"l1"}),"Opt1"]}),Object(w.jsxs)("span",{id:"s2",children:[Object(w.jsx)("span",{id:"l1"}),"Opt2"]}),Object(w.jsxs)("span",{id:"s3",children:[Object(w.jsx)("span",{id:"l1"}),"Opt3"]}),Object(w.jsxs)("span",{id:"s4",children:[Object(w.jsx)("span",{id:"l1"}),"Opt4"]}),Object(w.jsxs)("span",{id:"s5",children:[Object(w.jsx)("span",{id:"l1"}),"Contact us"]})]})})]})})},D=(n(24),n.p+"static/media/Oracle_SQL_Developer-Logo.wine.cc72d2e0.svg"),V=n.p+"static/media/javascript-logo-vector.9abe85eb.svg",Z=n.p+"static/media/Typescript_logo_2020.e0cf5672.svg",J=n.p+"static/media/html5-logo-vector.45283008.svg",G=n.p+"static/media/css3-logo-vector.49d5cb0d.svg",Q=n.p+"static/media/python-small-logo-vector.630499c0.svg",U=n.p+"static/media/c-logo-vector.6e731ebc.svg",$=n.p+"static/media/bootstrap-logo-vector.d180fe4c.svg",K=n.p+"static/media/redux-logo-vector.7009b5de.svg",X=n.p+"static/media/postgresql-inc-logo-vector.4776707e.svg",Y=n.p+"static/media/mariadb-logo-vector.c2953628.svg",ee=n.p+"static/media/mongodb-logo-vector.3f7df006.svg",te=n.p+"static/media/Apache_Maven_logo.1f517075.svg",ne=n.p+"static/media/paypal-logo-vector.b9ec48eb.svg",se=function(e){Object(b.a)(n,e);var t=Object(j.a)(n);function n(){return Object(d.a)(this,n),t.call(this)}return Object(h.a)(n,[{key:"render",value:function(){return Object(w.jsx)("div",{className:"container-fluid ps-5 pe-5 mt-5 ",style:{width:window.innerWidth<=400?"100%":"1024px"},children:Object(w.jsxs)("div",{className:"row",children:[Object(w.jsx)("code",{className:"text-center mb-5",style:{color:"blue",fontSize:"20pt"},children:"Technology Stack"}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("code",{style:{color:"blue"},children:"Programming Languages:"}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsxs)("div",{className:"row row-cols-lg-6 pLangsTechStack",children:[Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsx)("div",{className:"card-body text-center",children:Object(w.jsx)("img",{className:"jLogoTechStack",src:m})})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsxs)("div",{className:"card-body text-center",children:[Object(w.jsx)("img",{className:"sqlLogoTechStack",src:D})," SQL"]})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsxs)("div",{className:"card-body text-center",children:[Object(w.jsx)("img",{className:"jsLogoTechStack mb-2",src:V})," JavaScript"]})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsxs)("div",{className:"card-body text-center",children:[Object(w.jsx)("img",{className:"jsLogoTechStack mb-2",src:Z})," TypeScript"]})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsx)("div",{className:"card-body text-center d-flex align-items-center justify-content-center",children:Object(w.jsx)("img",{className:"htmlLogoTechStack",src:J})})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsx)("div",{className:"card-body text-center",children:Object(w.jsx)("img",{className:"cssLogoTechStack",src:G})})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsxs)("div",{className:"card-body text-center",children:[Object(w.jsx)("img",{className:"pLogo1TechStack mb-2",src:Q}),Object(w.jsx)("p",{className:"text-center",children:"Python"})]})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsx)("div",{className:"card-body text-center",children:Object(w.jsx)("img",{className:"cplusLogoTechStack ",src:U})})})})]}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("code",{style:{color:"blue"},children:"Frontend:"}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsxs)("div",{className:"row row-cols-lg-6 pLangsTechStack",children:[Object(w.jsx)("div",{className:"col offset-lg-2 offset-xl-2",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsxs)("div",{className:"card-body text-center",children:[Object(w.jsx)("img",{className:"rLogoTechStack mb-2",src:p})," React"]})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsxs)("div",{className:"card-body text-center",children:[Object(w.jsx)("img",{className:"aLogoTechStack mb-2",src:x})," Angular"]})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsxs)("div",{className:"card-body text-center",children:[Object(w.jsx)("img",{className:"bLogoTechStack mb-2",src:$})," Bootstrap"]})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsxs)("div",{className:"card-body text-center",children:[Object(w.jsx)("img",{className:"reLogoTechStack mb-3",src:K})," Redux"]})})})]}),Object(w.jsx)("code",{style:{color:"blue"},children:"Backend:"}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsx)("div",{className:"row backendTechStack",children:Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsxs)("div",{className:"card-body text-center",children:[Object(w.jsx)("img",{className:"sLogoTechStack mb-3",src:f})," ",Object(w.jsx)("br",{}),"Spring Boot"]})})})}),Object(w.jsx)("code",{style:{color:"blue"},children:"Databases:"}),Object(w.jsx)("br",{}),Object(w.jsx)("br",{}),Object(w.jsxs)("div",{className:"row databasesTechStack",children:[Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card border-0 ",children:Object(w.jsxs)("div",{className:"card-body text-center",children:[Object(w.jsx)("img",{className:"poLogoTechStack",src:X})," PostgresSQL"]})})}),Object(w.jsx)("div",{className:"col ",children:Object(w.jsxs)("div",{className:"card border-0",children:[Object(w.jsx)("div",{className:"card-body text-center",children:Object(w.jsx)("img",{className:"mDBLogoTechStack ",src:Y})}),Object(w.jsx)("p",{className:"text-center",children:"MariaDB"})]})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsx)("div",{className:"card-body ",children:Object(w.jsx)("img",{className:"mLogoTechStack ",src:ee})})})})]}),Object(w.jsx)("code",{style:{color:"blue"},children:"Project Management:"}),Object(w.jsx)("div",{className:"row pManagementTechStack",children:Object(w.jsx)("div",{className:"col ",children:Object(w.jsx)("div",{className:"card border-0 mb-5",children:Object(w.jsx)("div",{className:"card-body text-center",children:Object(w.jsx)("img",{className:"maLogoTechStack ",src:te})})})})}),Object(w.jsx)("code",{style:{color:"blue"},children:"Extras:"}),Object(w.jsx)("div",{className:"row extrasTechStack",children:Object(w.jsx)("div",{className:"col ",children:Object(w.jsx)("div",{className:"card border-0",children:Object(w.jsx)("div",{className:"card-body text-center",children:Object(w.jsx)("img",{className:"ppLogoTechStack",src:ne})})})})})]})})}}]),n}(i.a.Component),ie=function(e){Object(b.a)(n,e);var t=Object(j.a)(n);function n(){return Object(d.a)(this,n),t.apply(this,arguments)}return Object(h.a)(n,[{key:"render",value:function(){return Object(w.jsx)("div",{children:Object(w.jsx)(se,{})})}}]),n}(i.a.Component),re=ie,ce=function(e){Object(b.a)(n,e);var t=Object(j.a)(n);function n(){return Object(d.a)(this,n),t.call(this)}return Object(h.a)(n,[{key:"render",value:function(){return Object(w.jsxs)("div",{className:"container-fluid ps-5 mt-5 pe-5 c1",children:[Object(w.jsx)("p",{children:Object(w.jsx)("code",{style:{color:"blue"},children:"Web Designs"})}),Object(w.jsxs)("div",{className:"row row-cols-1",children:[Object(w.jsx)("div",{className:"col mb-4",children:Object(w.jsx)("div",{className:"card",children:Object(w.jsxs)("div",{className:"card-body",children:[Object(w.jsx)("h5",{className:"card-title",children:"Demo 1"}),Object(w.jsxs)(l.b,{style:{color:"black",fontSize:"15px",textDecoration:"none"},className:"bd-highlight",to:"/demo1",children:["Explore ",Object(w.jsx)("span",{children:"\u2192"})]})]})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card mb-5",children:Object(w.jsxs)("div",{className:"card-body",children:[Object(w.jsx)("h5",{className:"card-title",children:"Demo 2"}),Object(w.jsxs)(l.b,{style:{color:"black",fontSize:"15px",textDecoration:"none"},className:"bd-highlight",to:"/demo2",children:["Explore ",Object(w.jsx)("span",{children:"\u2192"})]})]})})})]})]})}}]),n}(i.a.Component),ae=function(e){Object(b.a)(n,e);var t=Object(j.a)(n);function n(){return Object(d.a)(this,n),t.apply(this,arguments)}return Object(h.a)(n,[{key:"render",value:function(){return Object(w.jsx)("div",{children:Object(w.jsx)(ce,{})})}}]),n}(i.a.Component),le=ae,oe=function(e){Object(b.a)(n,e);var t=Object(j.a)(n);function n(){return Object(d.a)(this,n),t.call(this)}return Object(h.a)(n,[{key:"render",value:function(){return Object(w.jsxs)("div",{className:"container-fluid ps-5 pe-5 mt-5 c1",children:[Object(w.jsx)("p",{children:Object(w.jsx)("code",{style:{color:"blue"},children:"Full stack apps "})}),Object(w.jsxs)("div",{className:"row row-cols-1 row-cols-md-2",children:[Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card mb-5",children:Object(w.jsxs)("div",{className:"card-body",children:[Object(w.jsx)("h5",{className:"card-title",children:"Ride Sharing"}),Object(w.jsx)("p",{className:"card-text",children:"In progress"})]})})}),Object(w.jsx)("div",{className:"col",children:Object(w.jsx)("div",{className:"card mb-5",children:Object(w.jsxs)("div",{className:"card-body",children:[Object(w.jsx)("h5",{className:"card-title",children:"Moud Oils"}),Object(w.jsx)("p",{className:"card-text",children:"In progress"})]})})})]})]})}}]),n}(i.a.Component),de=function(e){Object(b.a)(n,e);var t=Object(j.a)(n);function n(){return Object(d.a)(this,n),t.apply(this,arguments)}return Object(h.a)(n,[{key:"render",value:function(){return Object(w.jsx)("div",{children:Object(w.jsx)(oe,{})})}}]),n}(i.a.Component),he=de;c.a.render(Object(w.jsx)(i.a.StrictMode,{children:Object(w.jsx)(l.a,{children:Object(w.jsx)("div",{children:Object(w.jsxs)(o.c,{children:[Object(w.jsx)(o.a,{path:"/",component:Object(w.jsx)(y,{}),element:Object(w.jsx)(y,{})}),Object(w.jsx)(o.a,{path:"/java",component:Object(w.jsx)(y,{}),element:Object(w.jsx)(S,{})}),Object(w.jsx)(o.a,{path:"/python",component:Object(w.jsx)(y,{}),element:Object(w.jsx)(E,{})}),Object(w.jsx)(o.a,{path:"/demo1",component:Object(w.jsx)(y,{}),element:Object(w.jsx)(W,{})}),Object(w.jsx)(o.a,{path:"/demo2",component:Object(w.jsx)(y,{}),element:Object(w.jsx)(F,{})}),Object(w.jsx)(o.a,{path:"/tech-stack",component:Object(w.jsx)(y,{}),element:Object(w.jsx)(re,{})}),Object(w.jsx)(o.a,{path:"/web-design",component:Object(w.jsx)(y,{}),element:Object(w.jsx)(le,{})}),Object(w.jsx)(o.a,{path:"/full-stack",component:Object(w.jsx)(y,{}),element:Object(w.jsx)(he,{})}),Object(w.jsx)(o.a,{path:"/ride-sharing",component:function(){return window.location.replace("https://mhal1.github.io/ridesharing"),null}}),Object(w.jsx)(o.a,{path:"/*",component:Object(w.jsx)(y,{}),element:Object(w.jsx)(y,{})})]})})})}),document.getElementById("root")),a()}],[[25,1,2]]]);
//# sourceMappingURL=main.b88b3a55.chunk.js.map